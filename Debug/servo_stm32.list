
servo_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003534  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003644  08003644  00004644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003670  08003670  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003670  08003670  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003670  08003670  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003670  08003670  00004670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003674  08003674  00004674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003678  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08003684  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08003684  000050c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a694  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000185a  00000000  00000000  0000f6c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  00010f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000999  00000000  00000000  00011b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000174d4  00000000  00000000  000124f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dbc3  00000000  00000000  000299c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a314  00000000  00000000  00037588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c189c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003550  00000000  00000000  000c18e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  000c4e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800362c 	.word	0x0800362c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	0800362c 	.word	0x0800362c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_f2uiz>:
 800098c:	0042      	lsls	r2, r0, #1
 800098e:	d20e      	bcs.n	80009ae <__aeabi_f2uiz+0x22>
 8000990:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000994:	d30b      	bcc.n	80009ae <__aeabi_f2uiz+0x22>
 8000996:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800099a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800099e:	d409      	bmi.n	80009b4 <__aeabi_f2uiz+0x28>
 80009a0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80009a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009a8:	fa23 f002 	lsr.w	r0, r3, r2
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr
 80009b4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80009b8:	d101      	bne.n	80009be <__aeabi_f2uiz+0x32>
 80009ba:	0242      	lsls	r2, r0, #9
 80009bc:	d102      	bne.n	80009c4 <__aeabi_f2uiz+0x38>
 80009be:	f04f 30ff 	mov.w	r0, #4294967295
 80009c2:	4770      	bx	lr
 80009c4:	f04f 0000 	mov.w	r0, #0
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <PCA9685_SetBit>:
#define PCA9685_MODE1_SLEEP_BIT      4    // as in the datasheet page no 14/52
#define PCA9685_MODE1_AI_BIT         5    // as in the datasheet page no 14/52
#define PCA9685_MODE1_RESTART_BIT    7    // as in the datasheet page no 14/52

void PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b088      	sub	sp, #32
 80009d0:	af04      	add	r7, sp, #16
 80009d2:	4603      	mov	r3, r0
 80009d4:	71fb      	strb	r3, [r7, #7]
 80009d6:	460b      	mov	r3, r1
 80009d8:	71bb      	strb	r3, [r7, #6]
 80009da:	4613      	mov	r3, r2
 80009dc:	717b      	strb	r3, [r7, #5]
  uint8_t readValue;
  // Read all 8 bits and set only one bit to 0/1 and write all 8 bits back
  HAL_I2C_Mem_Read(&hi2c1, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	b29a      	uxth	r2, r3
 80009e2:	230a      	movs	r3, #10
 80009e4:	9302      	str	r3, [sp, #8]
 80009e6:	2301      	movs	r3, #1
 80009e8:	9301      	str	r3, [sp, #4]
 80009ea:	f107 030f 	add.w	r3, r7, #15
 80009ee:	9300      	str	r3, [sp, #0]
 80009f0:	2301      	movs	r3, #1
 80009f2:	2180      	movs	r1, #128	@ 0x80
 80009f4:	4819      	ldr	r0, [pc, #100]	@ (8000a5c <PCA9685_SetBit+0x90>)
 80009f6:	f001 f863 	bl	8001ac0 <HAL_I2C_Mem_Read>
  if (Value == 0) readValue &= ~(1 << Bit);
 80009fa:	797b      	ldrb	r3, [r7, #5]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d10d      	bne.n	8000a1c <PCA9685_SetBit+0x50>
 8000a00:	79bb      	ldrb	r3, [r7, #6]
 8000a02:	2201      	movs	r2, #1
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	b25b      	sxtb	r3, r3
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	b25a      	sxtb	r2, r3
 8000a0e:	7bfb      	ldrb	r3, [r7, #15]
 8000a10:	b25b      	sxtb	r3, r3
 8000a12:	4013      	ands	r3, r2
 8000a14:	b25b      	sxtb	r3, r3
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	73fb      	strb	r3, [r7, #15]
 8000a1a:	e00a      	b.n	8000a32 <PCA9685_SetBit+0x66>
  else readValue |= (1 << Bit);
 8000a1c:	79bb      	ldrb	r3, [r7, #6]
 8000a1e:	2201      	movs	r2, #1
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	b25a      	sxtb	r2, r3
 8000a26:	7bfb      	ldrb	r3, [r7, #15]
 8000a28:	b25b      	sxtb	r3, r3
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	b25b      	sxtb	r3, r3
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	230a      	movs	r3, #10
 8000a38:	9302      	str	r3, [sp, #8]
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	9301      	str	r3, [sp, #4]
 8000a3e:	f107 030f 	add.w	r3, r7, #15
 8000a42:	9300      	str	r3, [sp, #0]
 8000a44:	2301      	movs	r3, #1
 8000a46:	2180      	movs	r1, #128	@ 0x80
 8000a48:	4804      	ldr	r0, [pc, #16]	@ (8000a5c <PCA9685_SetBit+0x90>)
 8000a4a:	f000 ff3f 	bl	80018cc <HAL_I2C_Mem_Write>
  HAL_Delay(1);
 8000a4e:	2001      	movs	r0, #1
 8000a50:	f000 fb6c 	bl	800112c <HAL_Delay>
}
 8000a54:	bf00      	nop
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000028 	.word	0x20000028

08000a60 <PCA9685_SetPWMFrequency>:


void PCA9685_SetPWMFrequency(uint16_t frequency)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b088      	sub	sp, #32
 8000a64:	af04      	add	r7, sp, #16
 8000a66:	4603      	mov	r3, r0
 8000a68:	80fb      	strh	r3, [r7, #6]
  uint8_t prescale;
  if(frequency >= 1526) prescale = 0x03;
 8000a6a:	88fb      	ldrh	r3, [r7, #6]
 8000a6c:	f240 52f5 	movw	r2, #1525	@ 0x5f5
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d902      	bls.n	8000a7a <PCA9685_SetPWMFrequency+0x1a>
 8000a74:	2303      	movs	r3, #3
 8000a76:	73fb      	strb	r3, [r7, #15]
 8000a78:	e00c      	b.n	8000a94 <PCA9685_SetPWMFrequency+0x34>
  else if(frequency <= 24) prescale = 0xFF;
 8000a7a:	88fb      	ldrh	r3, [r7, #6]
 8000a7c:	2b18      	cmp	r3, #24
 8000a7e:	d802      	bhi.n	8000a86 <PCA9685_SetPWMFrequency+0x26>
 8000a80:	23ff      	movs	r3, #255	@ 0xff
 8000a82:	73fb      	strb	r3, [r7, #15]
 8000a84:	e006      	b.n	8000a94 <PCA9685_SetPWMFrequency+0x34>
  //  internal 25 MHz oscillator as in the datasheet page no 1/52
  else prescale = 25000000 / (4096 * frequency);
 8000a86:	88fb      	ldrh	r3, [r7, #6]
 8000a88:	031b      	lsls	r3, r3, #12
 8000a8a:	4a12      	ldr	r2, [pc, #72]	@ (8000ad4 <PCA9685_SetPWMFrequency+0x74>)
 8000a8c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	73fb      	strb	r3, [r7, #15]
  // prescale changes 3 to 255 for 1526Hz to 24Hz as in the datasheet page no 1/52
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 1);
 8000a94:	2201      	movs	r2, #1
 8000a96:	2104      	movs	r1, #4
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f7ff ff97 	bl	80009cc <PCA9685_SetBit>
  HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDRESS, PCA9685_PRE_SCALE, 1, &prescale, 1, 10);
 8000a9e:	230a      	movs	r3, #10
 8000aa0:	9302      	str	r3, [sp, #8]
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	9301      	str	r3, [sp, #4]
 8000aa6:	f107 030f 	add.w	r3, r7, #15
 8000aaa:	9300      	str	r3, [sp, #0]
 8000aac:	2301      	movs	r3, #1
 8000aae:	22fe      	movs	r2, #254	@ 0xfe
 8000ab0:	2180      	movs	r1, #128	@ 0x80
 8000ab2:	4809      	ldr	r0, [pc, #36]	@ (8000ad8 <PCA9685_SetPWMFrequency+0x78>)
 8000ab4:	f000 ff0a 	bl	80018cc <HAL_I2C_Mem_Write>
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 0);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2104      	movs	r1, #4
 8000abc:	2000      	movs	r0, #0
 8000abe:	f7ff ff85 	bl	80009cc <PCA9685_SetBit>
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, 1);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	2107      	movs	r1, #7
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f7ff ff80 	bl	80009cc <PCA9685_SetBit>
}
 8000acc:	bf00      	nop
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	017d7840 	.word	0x017d7840
 8000ad8:	20000028 	.word	0x20000028

08000adc <PCA9685_Init>:


void PCA9685_Init(uint16_t frequency)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	80fb      	strh	r3, [r7, #6]
  PCA9685_SetPWMFrequency(frequency); // 50 Hz for servo
 8000ae6:	88fb      	ldrh	r3, [r7, #6]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff ffb9 	bl	8000a60 <PCA9685_SetPWMFrequency>
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, 1);
 8000aee:	2201      	movs	r2, #1
 8000af0:	2105      	movs	r1, #5
 8000af2:	2000      	movs	r0, #0
 8000af4:	f7ff ff6a 	bl	80009cc <PCA9685_SetBit>
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <PCA9685_SetPWM>:

void PCA9685_SetPWM(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b088      	sub	sp, #32
 8000b04:	af04      	add	r7, sp, #16
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
 8000b0a:	460b      	mov	r3, r1
 8000b0c:	80bb      	strh	r3, [r7, #4]
 8000b0e:	4613      	mov	r3, r2
 8000b10:	807b      	strh	r3, [r7, #2]
  uint8_t registerAddress;
  uint8_t pwm[4];
  registerAddress = PCA9685_LED0_ON_L + (4 * Channel);
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	3306      	adds	r3, #6
 8000b1a:	73fb      	strb	r3, [r7, #15]
  // See example 1 in the datasheet page no 18/52
  pwm[0] = OnTime & 0xFF;
 8000b1c:	88bb      	ldrh	r3, [r7, #4]
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	723b      	strb	r3, [r7, #8]
  pwm[1] = OnTime>>8;
 8000b22:	88bb      	ldrh	r3, [r7, #4]
 8000b24:	0a1b      	lsrs	r3, r3, #8
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	727b      	strb	r3, [r7, #9]
  pwm[2] = OffTime & 0xFF;
 8000b2c:	887b      	ldrh	r3, [r7, #2]
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	72bb      	strb	r3, [r7, #10]
  pwm[3] = OffTime>>8;
 8000b32:	887b      	ldrh	r3, [r7, #2]
 8000b34:	0a1b      	lsrs	r3, r3, #8
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDRESS, registerAddress, 1, pwm, 4, 10);
 8000b3c:	7bfb      	ldrb	r3, [r7, #15]
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	230a      	movs	r3, #10
 8000b42:	9302      	str	r3, [sp, #8]
 8000b44:	2304      	movs	r3, #4
 8000b46:	9301      	str	r3, [sp, #4]
 8000b48:	f107 0308 	add.w	r3, r7, #8
 8000b4c:	9300      	str	r3, [sp, #0]
 8000b4e:	2301      	movs	r3, #1
 8000b50:	2180      	movs	r1, #128	@ 0x80
 8000b52:	4803      	ldr	r0, [pc, #12]	@ (8000b60 <PCA9685_SetPWM+0x60>)
 8000b54:	f000 feba 	bl	80018cc <HAL_I2C_Mem_Write>
}
 8000b58:	bf00      	nop
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000028 	.word	0x20000028
 8000b64:	00000000 	.word	0x00000000

08000b68 <PCA9685_SetServoAngle>:


void PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	6039      	str	r1, [r7, #0]
 8000b72:	71fb      	strb	r3, [r7, #7]
  float Value;
  // 50 Hz servo then 4095 Value --> 20 milliseconds
  // 0 degree --> 0.5 ms(102.4 Value) and 180 degree --> 2.5 ms(511.9 Value)
  Value = (Angle * (511.9 - 102.4) / 180.0) + 102.4;
 8000b74:	6838      	ldr	r0, [r7, #0]
 8000b76:	f7ff fc4f 	bl	8000418 <__aeabi_f2d>
 8000b7a:	a317      	add	r3, pc, #92	@ (adr r3, 8000bd8 <PCA9685_SetServoAngle+0x70>)
 8000b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b80:	f7ff fca2 	bl	80004c8 <__aeabi_dmul>
 8000b84:	4602      	mov	r2, r0
 8000b86:	460b      	mov	r3, r1
 8000b88:	4610      	mov	r0, r2
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	f04f 0200 	mov.w	r2, #0
 8000b90:	4b15      	ldr	r3, [pc, #84]	@ (8000be8 <PCA9685_SetServoAngle+0x80>)
 8000b92:	f7ff fdc3 	bl	800071c <__aeabi_ddiv>
 8000b96:	4602      	mov	r2, r0
 8000b98:	460b      	mov	r3, r1
 8000b9a:	4610      	mov	r0, r2
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	a310      	add	r3, pc, #64	@ (adr r3, 8000be0 <PCA9685_SetServoAngle+0x78>)
 8000ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ba4:	f7ff fada 	bl	800015c <__adddf3>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	460b      	mov	r3, r1
 8000bac:	4610      	mov	r0, r2
 8000bae:	4619      	mov	r1, r3
 8000bb0:	f7ff fe9c 	bl	80008ec <__aeabi_d2f>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	60fb      	str	r3, [r7, #12]
  PCA9685_SetPWM(Channel, 0, (uint16_t)Value);
 8000bb8:	68f8      	ldr	r0, [r7, #12]
 8000bba:	f7ff fee7 	bl	800098c <__aeabi_f2uiz>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	b29a      	uxth	r2, r3
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff ff9a 	bl	8000b00 <PCA9685_SetPWM>
}
 8000bcc:	bf00      	nop
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	f3af 8000 	nop.w
 8000bd8:	00000000 	.word	0x00000000
 8000bdc:	40799800 	.word	0x40799800
 8000be0:	9999999a 	.word	0x9999999a
 8000be4:	40599999 	.word	0x40599999
 8000be8:	40668000 	.word	0x40668000

08000bec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf2:	f000 fa39 	bl	8001068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf6:	f000 f815 	bl	8000c24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bfa:	f000 f8e1 	bl	8000dc0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000bfe:	f000 f84d 	bl	8000c9c <MX_I2C1_Init>
  MX_TIM2_Init();
 8000c02:	f000 f879 	bl	8000cf8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  PCA9685_Init(50); // 50Hz for servo
 8000c06:	2032      	movs	r0, #50	@ 0x32
 8000c08:	f7ff ff68 	bl	8000adc <PCA9685_Init>
  //  }


  // BEGIN SET UP
//  SetUpTIM();
  float setuptime = 10; // (sec)
 8000c0c:	4b03      	ldr	r3, [pc, #12]	@ (8000c1c <main+0x30>)
 8000c0e:	607b      	str	r3, [r7, #4]
  // END SETUP

  while (1)
  {

	  PCA9685_SetServoAngle(0, 90);
 8000c10:	4903      	ldr	r1, [pc, #12]	@ (8000c20 <main+0x34>)
 8000c12:	2000      	movs	r0, #0
 8000c14:	f7ff ffa8 	bl	8000b68 <PCA9685_SetServoAngle>
 8000c18:	e7fa      	b.n	8000c10 <main+0x24>
 8000c1a:	bf00      	nop
 8000c1c:	41200000 	.word	0x41200000
 8000c20:	42b40000 	.word	0x42b40000

08000c24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b090      	sub	sp, #64	@ 0x40
 8000c28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2a:	f107 0318 	add.w	r3, r7, #24
 8000c2e:	2228      	movs	r2, #40	@ 0x28
 8000c30:	2100      	movs	r1, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f002 fcce 	bl	80035d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
 8000c44:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c46:	2302      	movs	r3, #2
 8000c48:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c4e:	2310      	movs	r3, #16
 8000c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c52:	2300      	movs	r3, #0
 8000c54:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c56:	f107 0318 	add.w	r3, r7, #24
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f001 fd58 	bl	8002710 <HAL_RCC_OscConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c66:	f000 f8e5 	bl	8000e34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6a:	230f      	movs	r3, #15
 8000c6c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	2100      	movs	r1, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f001 ffc6 	bl	8002c14 <HAL_RCC_ClockConfig>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c8e:	f000 f8d1 	bl	8000e34 <Error_Handler>
  }
}
 8000c92:	bf00      	nop
 8000c94:	3740      	adds	r7, #64	@ 0x40
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ca0:	4b12      	ldr	r3, [pc, #72]	@ (8000cec <MX_I2C1_Init+0x50>)
 8000ca2:	4a13      	ldr	r2, [pc, #76]	@ (8000cf0 <MX_I2C1_Init+0x54>)
 8000ca4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ca6:	4b11      	ldr	r3, [pc, #68]	@ (8000cec <MX_I2C1_Init+0x50>)
 8000ca8:	4a12      	ldr	r2, [pc, #72]	@ (8000cf4 <MX_I2C1_Init+0x58>)
 8000caa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	@ (8000cec <MX_I2C1_Init+0x50>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cec <MX_I2C1_Init+0x50>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <MX_I2C1_Init+0x50>)
 8000cba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000cbe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cec <MX_I2C1_Init+0x50>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cc6:	4b09      	ldr	r3, [pc, #36]	@ (8000cec <MX_I2C1_Init+0x50>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ccc:	4b07      	ldr	r3, [pc, #28]	@ (8000cec <MX_I2C1_Init+0x50>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cd2:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <MX_I2C1_Init+0x50>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cd8:	4804      	ldr	r0, [pc, #16]	@ (8000cec <MX_I2C1_Init+0x50>)
 8000cda:	f000 fcb3 	bl	8001644 <HAL_I2C_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ce4:	f000 f8a6 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000028 	.word	0x20000028
 8000cf0:	40005400 	.word	0x40005400
 8000cf4:	000186a0 	.word	0x000186a0

08000cf8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	@ 0x28
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cfe:	f107 0320 	add.w	r3, r7, #32
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	611a      	str	r2, [r3, #16]
 8000d16:	615a      	str	r2, [r3, #20]
 8000d18:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d1a:	4b28      	ldr	r3, [pc, #160]	@ (8000dbc <MX_TIM2_Init+0xc4>)
 8000d1c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d20:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8000d22:	4b26      	ldr	r3, [pc, #152]	@ (8000dbc <MX_TIM2_Init+0xc4>)
 8000d24:	220f      	movs	r2, #15
 8000d26:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d28:	4b24      	ldr	r3, [pc, #144]	@ (8000dbc <MX_TIM2_Init+0xc4>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000d2e:	4b23      	ldr	r3, [pc, #140]	@ (8000dbc <MX_TIM2_Init+0xc4>)
 8000d30:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000d34:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d36:	4b21      	ldr	r3, [pc, #132]	@ (8000dbc <MX_TIM2_Init+0xc4>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dbc <MX_TIM2_Init+0xc4>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d42:	481e      	ldr	r0, [pc, #120]	@ (8000dbc <MX_TIM2_Init+0xc4>)
 8000d44:	f002 f8e0 	bl	8002f08 <HAL_TIM_PWM_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000d4e:	f000 f871 	bl	8000e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d52:	2300      	movs	r3, #0
 8000d54:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d56:	2300      	movs	r3, #0
 8000d58:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d5a:	f107 0320 	add.w	r3, r7, #32
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4816      	ldr	r0, [pc, #88]	@ (8000dbc <MX_TIM2_Init+0xc4>)
 8000d62:	f002 fbd9 	bl	8003518 <HAL_TIMEx_MasterConfigSynchronization>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000d6c:	f000 f862 	bl	8000e34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d70:	2360      	movs	r3, #96	@ 0x60
 8000d72:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d80:	1d3b      	adds	r3, r7, #4
 8000d82:	2204      	movs	r2, #4
 8000d84:	4619      	mov	r1, r3
 8000d86:	480d      	ldr	r0, [pc, #52]	@ (8000dbc <MX_TIM2_Init+0xc4>)
 8000d88:	f002 f90e 	bl	8002fa8 <HAL_TIM_PWM_ConfigChannel>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000d92:	f000 f84f 	bl	8000e34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	2208      	movs	r2, #8
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4807      	ldr	r0, [pc, #28]	@ (8000dbc <MX_TIM2_Init+0xc4>)
 8000d9e:	f002 f903 	bl	8002fa8 <HAL_TIM_PWM_ConfigChannel>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000da8:	f000 f844 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000dac:	4803      	ldr	r0, [pc, #12]	@ (8000dbc <MX_TIM2_Init+0xc4>)
 8000dae:	f000 f8d3 	bl	8000f58 <HAL_TIM_MspPostInit>

}
 8000db2:	bf00      	nop
 8000db4:	3728      	adds	r7, #40	@ 0x28
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	2000007c 	.word	0x2000007c

08000dc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e30 <MX_GPIO_Init+0x70>)
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	4a19      	ldr	r2, [pc, #100]	@ (8000e30 <MX_GPIO_Init+0x70>)
 8000dcc:	f043 0310 	orr.w	r3, r3, #16
 8000dd0:	6193      	str	r3, [r2, #24]
 8000dd2:	4b17      	ldr	r3, [pc, #92]	@ (8000e30 <MX_GPIO_Init+0x70>)
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	f003 0310 	and.w	r3, r3, #16
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dde:	4b14      	ldr	r3, [pc, #80]	@ (8000e30 <MX_GPIO_Init+0x70>)
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	4a13      	ldr	r2, [pc, #76]	@ (8000e30 <MX_GPIO_Init+0x70>)
 8000de4:	f043 0320 	orr.w	r3, r3, #32
 8000de8:	6193      	str	r3, [r2, #24]
 8000dea:	4b11      	ldr	r3, [pc, #68]	@ (8000e30 <MX_GPIO_Init+0x70>)
 8000dec:	699b      	ldr	r3, [r3, #24]
 8000dee:	f003 0320 	and.w	r3, r3, #32
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e30 <MX_GPIO_Init+0x70>)
 8000df8:	699b      	ldr	r3, [r3, #24]
 8000dfa:	4a0d      	ldr	r2, [pc, #52]	@ (8000e30 <MX_GPIO_Init+0x70>)
 8000dfc:	f043 0304 	orr.w	r3, r3, #4
 8000e00:	6193      	str	r3, [r2, #24]
 8000e02:	4b0b      	ldr	r3, [pc, #44]	@ (8000e30 <MX_GPIO_Init+0x70>)
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	f003 0304 	and.w	r3, r3, #4
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0e:	4b08      	ldr	r3, [pc, #32]	@ (8000e30 <MX_GPIO_Init+0x70>)
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	4a07      	ldr	r2, [pc, #28]	@ (8000e30 <MX_GPIO_Init+0x70>)
 8000e14:	f043 0308 	orr.w	r3, r3, #8
 8000e18:	6193      	str	r3, [r2, #24]
 8000e1a:	4b05      	ldr	r3, [pc, #20]	@ (8000e30 <MX_GPIO_Init+0x70>)
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	f003 0308 	and.w	r3, r3, #8
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e26:	bf00      	nop
 8000e28:	3714      	adds	r7, #20
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr
 8000e30:	40021000 	.word	0x40021000

08000e34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e38:	b672      	cpsid	i
}
 8000e3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <Error_Handler+0x8>

08000e40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e46:	4b15      	ldr	r3, [pc, #84]	@ (8000e9c <HAL_MspInit+0x5c>)
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	4a14      	ldr	r2, [pc, #80]	@ (8000e9c <HAL_MspInit+0x5c>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6193      	str	r3, [r2, #24]
 8000e52:	4b12      	ldr	r3, [pc, #72]	@ (8000e9c <HAL_MspInit+0x5c>)
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e9c <HAL_MspInit+0x5c>)
 8000e60:	69db      	ldr	r3, [r3, #28]
 8000e62:	4a0e      	ldr	r2, [pc, #56]	@ (8000e9c <HAL_MspInit+0x5c>)
 8000e64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e68:	61d3      	str	r3, [r2, #28]
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e9c <HAL_MspInit+0x5c>)
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea0 <HAL_MspInit+0x60>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	4a04      	ldr	r2, [pc, #16]	@ (8000ea0 <HAL_MspInit+0x60>)
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e92:	bf00      	nop
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40010000 	.word	0x40010000

08000ea4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b088      	sub	sp, #32
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 0310 	add.w	r3, r7, #16
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a15      	ldr	r2, [pc, #84]	@ (8000f14 <HAL_I2C_MspInit+0x70>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d123      	bne.n	8000f0c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec4:	4b14      	ldr	r3, [pc, #80]	@ (8000f18 <HAL_I2C_MspInit+0x74>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	4a13      	ldr	r2, [pc, #76]	@ (8000f18 <HAL_I2C_MspInit+0x74>)
 8000eca:	f043 0308 	orr.w	r3, r3, #8
 8000ece:	6193      	str	r3, [r2, #24]
 8000ed0:	4b11      	ldr	r3, [pc, #68]	@ (8000f18 <HAL_I2C_MspInit+0x74>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	f003 0308 	and.w	r3, r3, #8
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000edc:	23c0      	movs	r3, #192	@ 0xc0
 8000ede:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ee0:	2312      	movs	r3, #18
 8000ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee8:	f107 0310 	add.w	r3, r7, #16
 8000eec:	4619      	mov	r1, r3
 8000eee:	480b      	ldr	r0, [pc, #44]	@ (8000f1c <HAL_I2C_MspInit+0x78>)
 8000ef0:	f000 fa24 	bl	800133c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ef4:	4b08      	ldr	r3, [pc, #32]	@ (8000f18 <HAL_I2C_MspInit+0x74>)
 8000ef6:	69db      	ldr	r3, [r3, #28]
 8000ef8:	4a07      	ldr	r2, [pc, #28]	@ (8000f18 <HAL_I2C_MspInit+0x74>)
 8000efa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000efe:	61d3      	str	r3, [r2, #28]
 8000f00:	4b05      	ldr	r3, [pc, #20]	@ (8000f18 <HAL_I2C_MspInit+0x74>)
 8000f02:	69db      	ldr	r3, [r3, #28]
 8000f04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000f0c:	bf00      	nop
 8000f0e:	3720      	adds	r7, #32
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40005400 	.word	0x40005400
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	40010c00 	.word	0x40010c00

08000f20 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f30:	d10b      	bne.n	8000f4a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f32:	4b08      	ldr	r3, [pc, #32]	@ (8000f54 <HAL_TIM_PWM_MspInit+0x34>)
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	4a07      	ldr	r2, [pc, #28]	@ (8000f54 <HAL_TIM_PWM_MspInit+0x34>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	61d3      	str	r3, [r2, #28]
 8000f3e:	4b05      	ldr	r3, [pc, #20]	@ (8000f54 <HAL_TIM_PWM_MspInit+0x34>)
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000f4a:	bf00      	nop
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr
 8000f54:	40021000 	.word	0x40021000

08000f58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 0310 	add.w	r3, r7, #16
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f76:	d117      	bne.n	8000fa8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f78:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb0 <HAL_TIM_MspPostInit+0x58>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	4a0c      	ldr	r2, [pc, #48]	@ (8000fb0 <HAL_TIM_MspPostInit+0x58>)
 8000f7e:	f043 0304 	orr.w	r3, r3, #4
 8000f82:	6193      	str	r3, [r2, #24]
 8000f84:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb0 <HAL_TIM_MspPostInit+0x58>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	f003 0304 	and.w	r3, r3, #4
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000f90:	2306      	movs	r3, #6
 8000f92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9c:	f107 0310 	add.w	r3, r7, #16
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4804      	ldr	r0, [pc, #16]	@ (8000fb4 <HAL_TIM_MspPostInit+0x5c>)
 8000fa4:	f000 f9ca 	bl	800133c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000fa8:	bf00      	nop
 8000faa:	3720      	adds	r7, #32
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	40010800 	.word	0x40010800

08000fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <NMI_Handler+0x4>

08000fc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <HardFault_Handler+0x4>

08000fc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <MemManage_Handler+0x4>

08000fd0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <BusFault_Handler+0x4>

08000fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <UsageFault_Handler+0x4>

08000fe0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr

08000fec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr

08000ff8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr

08001004 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001008:	f000 f874 	bl	80010f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}

08001010 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr

0800101c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800101c:	f7ff fff8 	bl	8001010 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001020:	480b      	ldr	r0, [pc, #44]	@ (8001050 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001022:	490c      	ldr	r1, [pc, #48]	@ (8001054 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001024:	4a0c      	ldr	r2, [pc, #48]	@ (8001058 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001028:	e002      	b.n	8001030 <LoopCopyDataInit>

0800102a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800102c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102e:	3304      	adds	r3, #4

08001030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001034:	d3f9      	bcc.n	800102a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001036:	4a09      	ldr	r2, [pc, #36]	@ (800105c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001038:	4c09      	ldr	r4, [pc, #36]	@ (8001060 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800103c:	e001      	b.n	8001042 <LoopFillZerobss>

0800103e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001040:	3204      	adds	r2, #4

08001042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001044:	d3fb      	bcc.n	800103e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001046:	f002 facd 	bl	80035e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800104a:	f7ff fdcf 	bl	8000bec <main>
  bx lr
 800104e:	4770      	bx	lr
  ldr r0, =_sdata
 8001050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001054:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001058:	08003678 	.word	0x08003678
  ldr r2, =_sbss
 800105c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001060:	200000c8 	.word	0x200000c8

08001064 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001064:	e7fe      	b.n	8001064 <ADC1_2_IRQHandler>
	...

08001068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800106c:	4b08      	ldr	r3, [pc, #32]	@ (8001090 <HAL_Init+0x28>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a07      	ldr	r2, [pc, #28]	@ (8001090 <HAL_Init+0x28>)
 8001072:	f043 0310 	orr.w	r3, r3, #16
 8001076:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001078:	2003      	movs	r0, #3
 800107a:	f000 f92b 	bl	80012d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800107e:	200f      	movs	r0, #15
 8001080:	f000 f808 	bl	8001094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001084:	f7ff fedc 	bl	8000e40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40022000 	.word	0x40022000

08001094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800109c:	4b12      	ldr	r3, [pc, #72]	@ (80010e8 <HAL_InitTick+0x54>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b12      	ldr	r3, [pc, #72]	@ (80010ec <HAL_InitTick+0x58>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4619      	mov	r1, r3
 80010a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 f935 	bl	8001322 <HAL_SYSTICK_Config>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e00e      	b.n	80010e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b0f      	cmp	r3, #15
 80010c6:	d80a      	bhi.n	80010de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c8:	2200      	movs	r2, #0
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f000 f90b 	bl	80012ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d4:	4a06      	ldr	r2, [pc, #24]	@ (80010f0 <HAL_InitTick+0x5c>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	e000      	b.n	80010e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000000 	.word	0x20000000
 80010ec:	20000008 	.word	0x20000008
 80010f0:	20000004 	.word	0x20000004

080010f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f8:	4b05      	ldr	r3, [pc, #20]	@ (8001110 <HAL_IncTick+0x1c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b05      	ldr	r3, [pc, #20]	@ (8001114 <HAL_IncTick+0x20>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4413      	add	r3, r2
 8001104:	4a03      	ldr	r2, [pc, #12]	@ (8001114 <HAL_IncTick+0x20>)
 8001106:	6013      	str	r3, [r2, #0]
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr
 8001110:	20000008 	.word	0x20000008
 8001114:	200000c4 	.word	0x200000c4

08001118 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return uwTick;
 800111c:	4b02      	ldr	r3, [pc, #8]	@ (8001128 <HAL_GetTick+0x10>)
 800111e:	681b      	ldr	r3, [r3, #0]
}
 8001120:	4618      	mov	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	200000c4 	.word	0x200000c4

0800112c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001134:	f7ff fff0 	bl	8001118 <HAL_GetTick>
 8001138:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001144:	d005      	beq.n	8001152 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001146:	4b0a      	ldr	r3, [pc, #40]	@ (8001170 <HAL_Delay+0x44>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	461a      	mov	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4413      	add	r3, r2
 8001150:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001152:	bf00      	nop
 8001154:	f7ff ffe0 	bl	8001118 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	429a      	cmp	r2, r3
 8001162:	d8f7      	bhi.n	8001154 <HAL_Delay+0x28>
  {
  }
}
 8001164:	bf00      	nop
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000008 	.word	0x20000008

08001174 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001184:	4b0c      	ldr	r3, [pc, #48]	@ (80011b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001190:	4013      	ands	r3, r2
 8001192:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800119c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011a6:	4a04      	ldr	r2, [pc, #16]	@ (80011b8 <__NVIC_SetPriorityGrouping+0x44>)
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	60d3      	str	r3, [r2, #12]
}
 80011ac:	bf00      	nop
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c0:	4b04      	ldr	r3, [pc, #16]	@ (80011d4 <__NVIC_GetPriorityGrouping+0x18>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	0a1b      	lsrs	r3, r3, #8
 80011c6:	f003 0307 	and.w	r3, r3, #7
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	6039      	str	r1, [r7, #0]
 80011e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	db0a      	blt.n	8001202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	490c      	ldr	r1, [pc, #48]	@ (8001224 <__NVIC_SetPriority+0x4c>)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	0112      	lsls	r2, r2, #4
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	440b      	add	r3, r1
 80011fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001200:	e00a      	b.n	8001218 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4908      	ldr	r1, [pc, #32]	@ (8001228 <__NVIC_SetPriority+0x50>)
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	3b04      	subs	r3, #4
 8001210:	0112      	lsls	r2, r2, #4
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	440b      	add	r3, r1
 8001216:	761a      	strb	r2, [r3, #24]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	bc80      	pop	{r7}
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000e100 	.word	0xe000e100
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800122c:	b480      	push	{r7}
 800122e:	b089      	sub	sp, #36	@ 0x24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f1c3 0307 	rsb	r3, r3, #7
 8001246:	2b04      	cmp	r3, #4
 8001248:	bf28      	it	cs
 800124a:	2304      	movcs	r3, #4
 800124c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3304      	adds	r3, #4
 8001252:	2b06      	cmp	r3, #6
 8001254:	d902      	bls.n	800125c <NVIC_EncodePriority+0x30>
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3b03      	subs	r3, #3
 800125a:	e000      	b.n	800125e <NVIC_EncodePriority+0x32>
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	f04f 32ff 	mov.w	r2, #4294967295
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43da      	mvns	r2, r3
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	401a      	ands	r2, r3
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001274:	f04f 31ff 	mov.w	r1, #4294967295
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	fa01 f303 	lsl.w	r3, r1, r3
 800127e:	43d9      	mvns	r1, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	4313      	orrs	r3, r2
         );
}
 8001286:	4618      	mov	r0, r3
 8001288:	3724      	adds	r7, #36	@ 0x24
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr

08001290 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012a0:	d301      	bcc.n	80012a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012a2:	2301      	movs	r3, #1
 80012a4:	e00f      	b.n	80012c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012a6:	4a0a      	ldr	r2, [pc, #40]	@ (80012d0 <SysTick_Config+0x40>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ae:	210f      	movs	r1, #15
 80012b0:	f04f 30ff 	mov.w	r0, #4294967295
 80012b4:	f7ff ff90 	bl	80011d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b8:	4b05      	ldr	r3, [pc, #20]	@ (80012d0 <SysTick_Config+0x40>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012be:	4b04      	ldr	r3, [pc, #16]	@ (80012d0 <SysTick_Config+0x40>)
 80012c0:	2207      	movs	r2, #7
 80012c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	e000e010 	.word	0xe000e010

080012d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff ff49 	bl	8001174 <__NVIC_SetPriorityGrouping>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b086      	sub	sp, #24
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	4603      	mov	r3, r0
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	607a      	str	r2, [r7, #4]
 80012f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012fc:	f7ff ff5e 	bl	80011bc <__NVIC_GetPriorityGrouping>
 8001300:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	68b9      	ldr	r1, [r7, #8]
 8001306:	6978      	ldr	r0, [r7, #20]
 8001308:	f7ff ff90 	bl	800122c <NVIC_EncodePriority>
 800130c:	4602      	mov	r2, r0
 800130e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001312:	4611      	mov	r1, r2
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff ff5f 	bl	80011d8 <__NVIC_SetPriority>
}
 800131a:	bf00      	nop
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff ffb0 	bl	8001290 <SysTick_Config>
 8001330:	4603      	mov	r3, r0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800133c:	b480      	push	{r7}
 800133e:	b08b      	sub	sp, #44	@ 0x2c
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001346:	2300      	movs	r3, #0
 8001348:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800134a:	2300      	movs	r3, #0
 800134c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800134e:	e169      	b.n	8001624 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001350:	2201      	movs	r2, #1
 8001352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	69fa      	ldr	r2, [r7, #28]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	429a      	cmp	r2, r3
 800136a:	f040 8158 	bne.w	800161e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	4a9a      	ldr	r2, [pc, #616]	@ (80015dc <HAL_GPIO_Init+0x2a0>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d05e      	beq.n	8001436 <HAL_GPIO_Init+0xfa>
 8001378:	4a98      	ldr	r2, [pc, #608]	@ (80015dc <HAL_GPIO_Init+0x2a0>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d875      	bhi.n	800146a <HAL_GPIO_Init+0x12e>
 800137e:	4a98      	ldr	r2, [pc, #608]	@ (80015e0 <HAL_GPIO_Init+0x2a4>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d058      	beq.n	8001436 <HAL_GPIO_Init+0xfa>
 8001384:	4a96      	ldr	r2, [pc, #600]	@ (80015e0 <HAL_GPIO_Init+0x2a4>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d86f      	bhi.n	800146a <HAL_GPIO_Init+0x12e>
 800138a:	4a96      	ldr	r2, [pc, #600]	@ (80015e4 <HAL_GPIO_Init+0x2a8>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d052      	beq.n	8001436 <HAL_GPIO_Init+0xfa>
 8001390:	4a94      	ldr	r2, [pc, #592]	@ (80015e4 <HAL_GPIO_Init+0x2a8>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d869      	bhi.n	800146a <HAL_GPIO_Init+0x12e>
 8001396:	4a94      	ldr	r2, [pc, #592]	@ (80015e8 <HAL_GPIO_Init+0x2ac>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d04c      	beq.n	8001436 <HAL_GPIO_Init+0xfa>
 800139c:	4a92      	ldr	r2, [pc, #584]	@ (80015e8 <HAL_GPIO_Init+0x2ac>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d863      	bhi.n	800146a <HAL_GPIO_Init+0x12e>
 80013a2:	4a92      	ldr	r2, [pc, #584]	@ (80015ec <HAL_GPIO_Init+0x2b0>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d046      	beq.n	8001436 <HAL_GPIO_Init+0xfa>
 80013a8:	4a90      	ldr	r2, [pc, #576]	@ (80015ec <HAL_GPIO_Init+0x2b0>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d85d      	bhi.n	800146a <HAL_GPIO_Init+0x12e>
 80013ae:	2b12      	cmp	r3, #18
 80013b0:	d82a      	bhi.n	8001408 <HAL_GPIO_Init+0xcc>
 80013b2:	2b12      	cmp	r3, #18
 80013b4:	d859      	bhi.n	800146a <HAL_GPIO_Init+0x12e>
 80013b6:	a201      	add	r2, pc, #4	@ (adr r2, 80013bc <HAL_GPIO_Init+0x80>)
 80013b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013bc:	08001437 	.word	0x08001437
 80013c0:	08001411 	.word	0x08001411
 80013c4:	08001423 	.word	0x08001423
 80013c8:	08001465 	.word	0x08001465
 80013cc:	0800146b 	.word	0x0800146b
 80013d0:	0800146b 	.word	0x0800146b
 80013d4:	0800146b 	.word	0x0800146b
 80013d8:	0800146b 	.word	0x0800146b
 80013dc:	0800146b 	.word	0x0800146b
 80013e0:	0800146b 	.word	0x0800146b
 80013e4:	0800146b 	.word	0x0800146b
 80013e8:	0800146b 	.word	0x0800146b
 80013ec:	0800146b 	.word	0x0800146b
 80013f0:	0800146b 	.word	0x0800146b
 80013f4:	0800146b 	.word	0x0800146b
 80013f8:	0800146b 	.word	0x0800146b
 80013fc:	0800146b 	.word	0x0800146b
 8001400:	08001419 	.word	0x08001419
 8001404:	0800142d 	.word	0x0800142d
 8001408:	4a79      	ldr	r2, [pc, #484]	@ (80015f0 <HAL_GPIO_Init+0x2b4>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d013      	beq.n	8001436 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800140e:	e02c      	b.n	800146a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	623b      	str	r3, [r7, #32]
          break;
 8001416:	e029      	b.n	800146c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	3304      	adds	r3, #4
 800141e:	623b      	str	r3, [r7, #32]
          break;
 8001420:	e024      	b.n	800146c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	3308      	adds	r3, #8
 8001428:	623b      	str	r3, [r7, #32]
          break;
 800142a:	e01f      	b.n	800146c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	330c      	adds	r3, #12
 8001432:	623b      	str	r3, [r7, #32]
          break;
 8001434:	e01a      	b.n	800146c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d102      	bne.n	8001444 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800143e:	2304      	movs	r3, #4
 8001440:	623b      	str	r3, [r7, #32]
          break;
 8001442:	e013      	b.n	800146c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d105      	bne.n	8001458 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800144c:	2308      	movs	r3, #8
 800144e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	69fa      	ldr	r2, [r7, #28]
 8001454:	611a      	str	r2, [r3, #16]
          break;
 8001456:	e009      	b.n	800146c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001458:	2308      	movs	r3, #8
 800145a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	69fa      	ldr	r2, [r7, #28]
 8001460:	615a      	str	r2, [r3, #20]
          break;
 8001462:	e003      	b.n	800146c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001464:	2300      	movs	r3, #0
 8001466:	623b      	str	r3, [r7, #32]
          break;
 8001468:	e000      	b.n	800146c <HAL_GPIO_Init+0x130>
          break;
 800146a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	2bff      	cmp	r3, #255	@ 0xff
 8001470:	d801      	bhi.n	8001476 <HAL_GPIO_Init+0x13a>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	e001      	b.n	800147a <HAL_GPIO_Init+0x13e>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3304      	adds	r3, #4
 800147a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	2bff      	cmp	r3, #255	@ 0xff
 8001480:	d802      	bhi.n	8001488 <HAL_GPIO_Init+0x14c>
 8001482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	e002      	b.n	800148e <HAL_GPIO_Init+0x152>
 8001488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800148a:	3b08      	subs	r3, #8
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	210f      	movs	r1, #15
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	fa01 f303 	lsl.w	r3, r1, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	401a      	ands	r2, r3
 80014a0:	6a39      	ldr	r1, [r7, #32]
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	fa01 f303 	lsl.w	r3, r1, r3
 80014a8:	431a      	orrs	r2, r3
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f000 80b1 	beq.w	800161e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014bc:	4b4d      	ldr	r3, [pc, #308]	@ (80015f4 <HAL_GPIO_Init+0x2b8>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	4a4c      	ldr	r2, [pc, #304]	@ (80015f4 <HAL_GPIO_Init+0x2b8>)
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	6193      	str	r3, [r2, #24]
 80014c8:	4b4a      	ldr	r3, [pc, #296]	@ (80015f4 <HAL_GPIO_Init+0x2b8>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014d4:	4a48      	ldr	r2, [pc, #288]	@ (80015f8 <HAL_GPIO_Init+0x2bc>)
 80014d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d8:	089b      	lsrs	r3, r3, #2
 80014da:	3302      	adds	r3, #2
 80014dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e4:	f003 0303 	and.w	r3, r3, #3
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	220f      	movs	r2, #15
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	43db      	mvns	r3, r3
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	4013      	ands	r3, r2
 80014f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a40      	ldr	r2, [pc, #256]	@ (80015fc <HAL_GPIO_Init+0x2c0>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d013      	beq.n	8001528 <HAL_GPIO_Init+0x1ec>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4a3f      	ldr	r2, [pc, #252]	@ (8001600 <HAL_GPIO_Init+0x2c4>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d00d      	beq.n	8001524 <HAL_GPIO_Init+0x1e8>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a3e      	ldr	r2, [pc, #248]	@ (8001604 <HAL_GPIO_Init+0x2c8>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d007      	beq.n	8001520 <HAL_GPIO_Init+0x1e4>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4a3d      	ldr	r2, [pc, #244]	@ (8001608 <HAL_GPIO_Init+0x2cc>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d101      	bne.n	800151c <HAL_GPIO_Init+0x1e0>
 8001518:	2303      	movs	r3, #3
 800151a:	e006      	b.n	800152a <HAL_GPIO_Init+0x1ee>
 800151c:	2304      	movs	r3, #4
 800151e:	e004      	b.n	800152a <HAL_GPIO_Init+0x1ee>
 8001520:	2302      	movs	r3, #2
 8001522:	e002      	b.n	800152a <HAL_GPIO_Init+0x1ee>
 8001524:	2301      	movs	r3, #1
 8001526:	e000      	b.n	800152a <HAL_GPIO_Init+0x1ee>
 8001528:	2300      	movs	r3, #0
 800152a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800152c:	f002 0203 	and.w	r2, r2, #3
 8001530:	0092      	lsls	r2, r2, #2
 8001532:	4093      	lsls	r3, r2
 8001534:	68fa      	ldr	r2, [r7, #12]
 8001536:	4313      	orrs	r3, r2
 8001538:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800153a:	492f      	ldr	r1, [pc, #188]	@ (80015f8 <HAL_GPIO_Init+0x2bc>)
 800153c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153e:	089b      	lsrs	r3, r3, #2
 8001540:	3302      	adds	r3, #2
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d006      	beq.n	8001562 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001554:	4b2d      	ldr	r3, [pc, #180]	@ (800160c <HAL_GPIO_Init+0x2d0>)
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	492c      	ldr	r1, [pc, #176]	@ (800160c <HAL_GPIO_Init+0x2d0>)
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	4313      	orrs	r3, r2
 800155e:	608b      	str	r3, [r1, #8]
 8001560:	e006      	b.n	8001570 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001562:	4b2a      	ldr	r3, [pc, #168]	@ (800160c <HAL_GPIO_Init+0x2d0>)
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	43db      	mvns	r3, r3
 800156a:	4928      	ldr	r1, [pc, #160]	@ (800160c <HAL_GPIO_Init+0x2d0>)
 800156c:	4013      	ands	r3, r2
 800156e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d006      	beq.n	800158a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800157c:	4b23      	ldr	r3, [pc, #140]	@ (800160c <HAL_GPIO_Init+0x2d0>)
 800157e:	68da      	ldr	r2, [r3, #12]
 8001580:	4922      	ldr	r1, [pc, #136]	@ (800160c <HAL_GPIO_Init+0x2d0>)
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	4313      	orrs	r3, r2
 8001586:	60cb      	str	r3, [r1, #12]
 8001588:	e006      	b.n	8001598 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800158a:	4b20      	ldr	r3, [pc, #128]	@ (800160c <HAL_GPIO_Init+0x2d0>)
 800158c:	68da      	ldr	r2, [r3, #12]
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	43db      	mvns	r3, r3
 8001592:	491e      	ldr	r1, [pc, #120]	@ (800160c <HAL_GPIO_Init+0x2d0>)
 8001594:	4013      	ands	r3, r2
 8001596:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d006      	beq.n	80015b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015a4:	4b19      	ldr	r3, [pc, #100]	@ (800160c <HAL_GPIO_Init+0x2d0>)
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	4918      	ldr	r1, [pc, #96]	@ (800160c <HAL_GPIO_Init+0x2d0>)
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	604b      	str	r3, [r1, #4]
 80015b0:	e006      	b.n	80015c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015b2:	4b16      	ldr	r3, [pc, #88]	@ (800160c <HAL_GPIO_Init+0x2d0>)
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	43db      	mvns	r3, r3
 80015ba:	4914      	ldr	r1, [pc, #80]	@ (800160c <HAL_GPIO_Init+0x2d0>)
 80015bc:	4013      	ands	r3, r2
 80015be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d021      	beq.n	8001610 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015cc:	4b0f      	ldr	r3, [pc, #60]	@ (800160c <HAL_GPIO_Init+0x2d0>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	490e      	ldr	r1, [pc, #56]	@ (800160c <HAL_GPIO_Init+0x2d0>)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	600b      	str	r3, [r1, #0]
 80015d8:	e021      	b.n	800161e <HAL_GPIO_Init+0x2e2>
 80015da:	bf00      	nop
 80015dc:	10320000 	.word	0x10320000
 80015e0:	10310000 	.word	0x10310000
 80015e4:	10220000 	.word	0x10220000
 80015e8:	10210000 	.word	0x10210000
 80015ec:	10120000 	.word	0x10120000
 80015f0:	10110000 	.word	0x10110000
 80015f4:	40021000 	.word	0x40021000
 80015f8:	40010000 	.word	0x40010000
 80015fc:	40010800 	.word	0x40010800
 8001600:	40010c00 	.word	0x40010c00
 8001604:	40011000 	.word	0x40011000
 8001608:	40011400 	.word	0x40011400
 800160c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001610:	4b0b      	ldr	r3, [pc, #44]	@ (8001640 <HAL_GPIO_Init+0x304>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	43db      	mvns	r3, r3
 8001618:	4909      	ldr	r1, [pc, #36]	@ (8001640 <HAL_GPIO_Init+0x304>)
 800161a:	4013      	ands	r3, r2
 800161c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800161e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001620:	3301      	adds	r3, #1
 8001622:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162a:	fa22 f303 	lsr.w	r3, r2, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	f47f ae8e 	bne.w	8001350 <HAL_GPIO_Init+0x14>
  }
}
 8001634:	bf00      	nop
 8001636:	bf00      	nop
 8001638:	372c      	adds	r7, #44	@ 0x2c
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr
 8001640:	40010400 	.word	0x40010400

08001644 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e12b      	b.n	80018ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d106      	bne.n	8001670 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff fc1a 	bl	8000ea4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2224      	movs	r2, #36	@ 0x24
 8001674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f022 0201 	bic.w	r2, r2, #1
 8001686:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001696:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016a8:	f001 fbfc 	bl	8002ea4 <HAL_RCC_GetPCLK1Freq>
 80016ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	4a81      	ldr	r2, [pc, #516]	@ (80018b8 <HAL_I2C_Init+0x274>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d807      	bhi.n	80016c8 <HAL_I2C_Init+0x84>
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4a80      	ldr	r2, [pc, #512]	@ (80018bc <HAL_I2C_Init+0x278>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	bf94      	ite	ls
 80016c0:	2301      	movls	r3, #1
 80016c2:	2300      	movhi	r3, #0
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	e006      	b.n	80016d6 <HAL_I2C_Init+0x92>
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4a7d      	ldr	r2, [pc, #500]	@ (80018c0 <HAL_I2C_Init+0x27c>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	bf94      	ite	ls
 80016d0:	2301      	movls	r3, #1
 80016d2:	2300      	movhi	r3, #0
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e0e7      	b.n	80018ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4a78      	ldr	r2, [pc, #480]	@ (80018c4 <HAL_I2C_Init+0x280>)
 80016e2:	fba2 2303 	umull	r2, r3, r2, r3
 80016e6:	0c9b      	lsrs	r3, r3, #18
 80016e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68ba      	ldr	r2, [r7, #8]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	4a6a      	ldr	r2, [pc, #424]	@ (80018b8 <HAL_I2C_Init+0x274>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d802      	bhi.n	8001718 <HAL_I2C_Init+0xd4>
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	3301      	adds	r3, #1
 8001716:	e009      	b.n	800172c <HAL_I2C_Init+0xe8>
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800171e:	fb02 f303 	mul.w	r3, r2, r3
 8001722:	4a69      	ldr	r2, [pc, #420]	@ (80018c8 <HAL_I2C_Init+0x284>)
 8001724:	fba2 2303 	umull	r2, r3, r2, r3
 8001728:	099b      	lsrs	r3, r3, #6
 800172a:	3301      	adds	r3, #1
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	6812      	ldr	r2, [r2, #0]
 8001730:	430b      	orrs	r3, r1
 8001732:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800173e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	495c      	ldr	r1, [pc, #368]	@ (80018b8 <HAL_I2C_Init+0x274>)
 8001748:	428b      	cmp	r3, r1
 800174a:	d819      	bhi.n	8001780 <HAL_I2C_Init+0x13c>
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	1e59      	subs	r1, r3, #1
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	fbb1 f3f3 	udiv	r3, r1, r3
 800175a:	1c59      	adds	r1, r3, #1
 800175c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001760:	400b      	ands	r3, r1
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00a      	beq.n	800177c <HAL_I2C_Init+0x138>
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	1e59      	subs	r1, r3, #1
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	fbb1 f3f3 	udiv	r3, r1, r3
 8001774:	3301      	adds	r3, #1
 8001776:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800177a:	e051      	b.n	8001820 <HAL_I2C_Init+0x1dc>
 800177c:	2304      	movs	r3, #4
 800177e:	e04f      	b.n	8001820 <HAL_I2C_Init+0x1dc>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d111      	bne.n	80017ac <HAL_I2C_Init+0x168>
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	1e58      	subs	r0, r3, #1
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6859      	ldr	r1, [r3, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	440b      	add	r3, r1
 8001796:	fbb0 f3f3 	udiv	r3, r0, r3
 800179a:	3301      	adds	r3, #1
 800179c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	bf0c      	ite	eq
 80017a4:	2301      	moveq	r3, #1
 80017a6:	2300      	movne	r3, #0
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	e012      	b.n	80017d2 <HAL_I2C_Init+0x18e>
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	1e58      	subs	r0, r3, #1
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6859      	ldr	r1, [r3, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	440b      	add	r3, r1
 80017ba:	0099      	lsls	r1, r3, #2
 80017bc:	440b      	add	r3, r1
 80017be:	fbb0 f3f3 	udiv	r3, r0, r3
 80017c2:	3301      	adds	r3, #1
 80017c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	bf0c      	ite	eq
 80017cc:	2301      	moveq	r3, #1
 80017ce:	2300      	movne	r3, #0
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <HAL_I2C_Init+0x196>
 80017d6:	2301      	movs	r3, #1
 80017d8:	e022      	b.n	8001820 <HAL_I2C_Init+0x1dc>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10e      	bne.n	8001800 <HAL_I2C_Init+0x1bc>
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	1e58      	subs	r0, r3, #1
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6859      	ldr	r1, [r3, #4]
 80017ea:	460b      	mov	r3, r1
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	440b      	add	r3, r1
 80017f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80017f4:	3301      	adds	r3, #1
 80017f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017fe:	e00f      	b.n	8001820 <HAL_I2C_Init+0x1dc>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	1e58      	subs	r0, r3, #1
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6859      	ldr	r1, [r3, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	440b      	add	r3, r1
 800180e:	0099      	lsls	r1, r3, #2
 8001810:	440b      	add	r3, r1
 8001812:	fbb0 f3f3 	udiv	r3, r0, r3
 8001816:	3301      	adds	r3, #1
 8001818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800181c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	6809      	ldr	r1, [r1, #0]
 8001824:	4313      	orrs	r3, r2
 8001826:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69da      	ldr	r2, [r3, #28]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a1b      	ldr	r3, [r3, #32]
 800183a:	431a      	orrs	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	430a      	orrs	r2, r1
 8001842:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800184e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6911      	ldr	r1, [r2, #16]
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	68d2      	ldr	r2, [r2, #12]
 800185a:	4311      	orrs	r1, r2
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	6812      	ldr	r2, [r2, #0]
 8001860:	430b      	orrs	r3, r1
 8001862:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	695a      	ldr	r2, [r3, #20]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	431a      	orrs	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	430a      	orrs	r2, r1
 800187e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f042 0201 	orr.w	r2, r2, #1
 800188e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2220      	movs	r2, #32
 800189a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	000186a0 	.word	0x000186a0
 80018bc:	001e847f 	.word	0x001e847f
 80018c0:	003d08ff 	.word	0x003d08ff
 80018c4:	431bde83 	.word	0x431bde83
 80018c8:	10624dd3 	.word	0x10624dd3

080018cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b088      	sub	sp, #32
 80018d0:	af02      	add	r7, sp, #8
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	4608      	mov	r0, r1
 80018d6:	4611      	mov	r1, r2
 80018d8:	461a      	mov	r2, r3
 80018da:	4603      	mov	r3, r0
 80018dc:	817b      	strh	r3, [r7, #10]
 80018de:	460b      	mov	r3, r1
 80018e0:	813b      	strh	r3, [r7, #8]
 80018e2:	4613      	mov	r3, r2
 80018e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018e6:	f7ff fc17 	bl	8001118 <HAL_GetTick>
 80018ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2b20      	cmp	r3, #32
 80018f6:	f040 80d9 	bne.w	8001aac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	9300      	str	r3, [sp, #0]
 80018fe:	2319      	movs	r3, #25
 8001900:	2201      	movs	r2, #1
 8001902:	496d      	ldr	r1, [pc, #436]	@ (8001ab8 <HAL_I2C_Mem_Write+0x1ec>)
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f000 fccd 	bl	80022a4 <I2C_WaitOnFlagUntilTimeout>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001910:	2302      	movs	r3, #2
 8001912:	e0cc      	b.n	8001aae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800191a:	2b01      	cmp	r3, #1
 800191c:	d101      	bne.n	8001922 <HAL_I2C_Mem_Write+0x56>
 800191e:	2302      	movs	r3, #2
 8001920:	e0c5      	b.n	8001aae <HAL_I2C_Mem_Write+0x1e2>
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2201      	movs	r2, #1
 8001926:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	2b01      	cmp	r3, #1
 8001936:	d007      	beq.n	8001948 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 0201 	orr.w	r2, r2, #1
 8001946:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001956:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2221      	movs	r2, #33	@ 0x21
 800195c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2240      	movs	r2, #64	@ 0x40
 8001964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2200      	movs	r2, #0
 800196c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6a3a      	ldr	r2, [r7, #32]
 8001972:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001978:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800197e:	b29a      	uxth	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4a4d      	ldr	r2, [pc, #308]	@ (8001abc <HAL_I2C_Mem_Write+0x1f0>)
 8001988:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800198a:	88f8      	ldrh	r0, [r7, #6]
 800198c:	893a      	ldrh	r2, [r7, #8]
 800198e:	8979      	ldrh	r1, [r7, #10]
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	9301      	str	r3, [sp, #4]
 8001994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	4603      	mov	r3, r0
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f000 fb04 	bl	8001fa8 <I2C_RequestMemoryWrite>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d052      	beq.n	8001a4c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e081      	b.n	8001aae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f000 fd92 	bl	80024d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00d      	beq.n	80019d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019be:	2b04      	cmp	r3, #4
 80019c0:	d107      	bne.n	80019d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e06b      	b.n	8001aae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019da:	781a      	ldrb	r2, [r3, #0]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e6:	1c5a      	adds	r2, r3, #1
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019f0:	3b01      	subs	r3, #1
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	3b01      	subs	r3, #1
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	2b04      	cmp	r3, #4
 8001a12:	d11b      	bne.n	8001a4c <HAL_I2C_Mem_Write+0x180>
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d017      	beq.n	8001a4c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a20:	781a      	ldrb	r2, [r3, #0]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a2c:	1c5a      	adds	r2, r3, #1
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a36:	3b01      	subs	r3, #1
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	3b01      	subs	r3, #1
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1aa      	bne.n	80019aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	f000 fd85 	bl	8002568 <I2C_WaitOnBTFFlagUntilTimeout>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d00d      	beq.n	8001a80 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a68:	2b04      	cmp	r3, #4
 8001a6a:	d107      	bne.n	8001a7c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a7a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e016      	b.n	8001aae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2220      	movs	r2, #32
 8001a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	e000      	b.n	8001aae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001aac:	2302      	movs	r3, #2
  }
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	00100002 	.word	0x00100002
 8001abc:	ffff0000 	.word	0xffff0000

08001ac0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08c      	sub	sp, #48	@ 0x30
 8001ac4:	af02      	add	r7, sp, #8
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	4608      	mov	r0, r1
 8001aca:	4611      	mov	r1, r2
 8001acc:	461a      	mov	r2, r3
 8001ace:	4603      	mov	r3, r0
 8001ad0:	817b      	strh	r3, [r7, #10]
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	813b      	strh	r3, [r7, #8]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001ada:	2300      	movs	r3, #0
 8001adc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ade:	f7ff fb1b 	bl	8001118 <HAL_GetTick>
 8001ae2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b20      	cmp	r3, #32
 8001aee:	f040 8250 	bne.w	8001f92 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	2319      	movs	r3, #25
 8001af8:	2201      	movs	r2, #1
 8001afa:	4982      	ldr	r1, [pc, #520]	@ (8001d04 <HAL_I2C_Mem_Read+0x244>)
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f000 fbd1 	bl	80022a4 <I2C_WaitOnFlagUntilTimeout>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	e243      	b.n	8001f94 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d101      	bne.n	8001b1a <HAL_I2C_Mem_Read+0x5a>
 8001b16:	2302      	movs	r3, #2
 8001b18:	e23c      	b.n	8001f94 <HAL_I2C_Mem_Read+0x4d4>
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d007      	beq.n	8001b40 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f042 0201 	orr.w	r2, r2, #1
 8001b3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2222      	movs	r2, #34	@ 0x22
 8001b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2240      	movs	r2, #64	@ 0x40
 8001b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001b70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4a62      	ldr	r2, [pc, #392]	@ (8001d08 <HAL_I2C_Mem_Read+0x248>)
 8001b80:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b82:	88f8      	ldrh	r0, [r7, #6]
 8001b84:	893a      	ldrh	r2, [r7, #8]
 8001b86:	8979      	ldrh	r1, [r7, #10]
 8001b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8a:	9301      	str	r3, [sp, #4]
 8001b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	4603      	mov	r3, r0
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f000 fa9e 	bl	80020d4 <I2C_RequestMemoryRead>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e1f8      	b.n	8001f94 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d113      	bne.n	8001bd2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	61fb      	str	r3, [r7, #28]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	61fb      	str	r3, [r7, #28]
 8001bbe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	e1cc      	b.n	8001f6c <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d11e      	bne.n	8001c18 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001be8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001bea:	b672      	cpsid	i
}
 8001bec:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61bb      	str	r3, [r7, #24]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	61bb      	str	r3, [r7, #24]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	61bb      	str	r3, [r7, #24]
 8001c02:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c12:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001c14:	b662      	cpsie	i
}
 8001c16:	e035      	b.n	8001c84 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d11e      	bne.n	8001c5e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c30:	b672      	cpsid	i
}
 8001c32:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c58:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001c5a:	b662      	cpsie	i
}
 8001c5c:	e012      	b.n	8001c84 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001c6c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c6e:	2300      	movs	r3, #0
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	613b      	str	r3, [r7, #16]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001c84:	e172      	b.n	8001f6c <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c8a:	2b03      	cmp	r3, #3
 8001c8c:	f200 811f 	bhi.w	8001ece <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d123      	bne.n	8001ce0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c9a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f000 fcab 	bl	80025f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e173      	b.n	8001f94 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	691a      	ldr	r2, [r3, #16]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cbe:	1c5a      	adds	r2, r3, #1
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001cde:	e145      	b.n	8001f6c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d152      	bne.n	8001d8e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cee:	2200      	movs	r2, #0
 8001cf0:	4906      	ldr	r1, [pc, #24]	@ (8001d0c <HAL_I2C_Mem_Read+0x24c>)
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f000 fad6 	bl	80022a4 <I2C_WaitOnFlagUntilTimeout>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d008      	beq.n	8001d10 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e148      	b.n	8001f94 <HAL_I2C_Mem_Read+0x4d4>
 8001d02:	bf00      	nop
 8001d04:	00100002 	.word	0x00100002
 8001d08:	ffff0000 	.word	0xffff0000
 8001d0c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001d10:	b672      	cpsid	i
}
 8001d12:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	691a      	ldr	r2, [r3, #16]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d36:	1c5a      	adds	r2, r3, #1
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d40:	3b01      	subs	r3, #1
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001d56:	b662      	cpsie	i
}
 8001d58:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	691a      	ldr	r2, [r3, #16]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6c:	1c5a      	adds	r2, r3, #1
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d76:	3b01      	subs	r3, #1
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	3b01      	subs	r3, #1
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001d8c:	e0ee      	b.n	8001f6c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d94:	2200      	movs	r2, #0
 8001d96:	4981      	ldr	r1, [pc, #516]	@ (8001f9c <HAL_I2C_Mem_Read+0x4dc>)
 8001d98:	68f8      	ldr	r0, [r7, #12]
 8001d9a:	f000 fa83 	bl	80022a4 <I2C_WaitOnFlagUntilTimeout>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e0f5      	b.n	8001f94 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001db6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001db8:	b672      	cpsid	i
}
 8001dba:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691a      	ldr	r2, [r3, #16]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dce:	1c5a      	adds	r2, r3, #1
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	3b01      	subs	r3, #1
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001dee:	4b6c      	ldr	r3, [pc, #432]	@ (8001fa0 <HAL_I2C_Mem_Read+0x4e0>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	08db      	lsrs	r3, r3, #3
 8001df4:	4a6b      	ldr	r2, [pc, #428]	@ (8001fa4 <HAL_I2C_Mem_Read+0x4e4>)
 8001df6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfa:	0a1a      	lsrs	r2, r3, #8
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	00da      	lsls	r2, r3, #3
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001e08:	6a3b      	ldr	r3, [r7, #32]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001e0e:	6a3b      	ldr	r3, [r7, #32]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d118      	bne.n	8001e46 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2220      	movs	r2, #32
 8001e1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2e:	f043 0220 	orr.w	r2, r3, #32
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001e36:	b662      	cpsie	i
}
 8001e38:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e0a6      	b.n	8001f94 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b04      	cmp	r3, #4
 8001e52:	d1d9      	bne.n	8001e08 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691a      	ldr	r2, [r3, #16]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e76:	1c5a      	adds	r2, r3, #1
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e80:	3b01      	subs	r3, #1
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001e96:	b662      	cpsie	i
}
 8001e98:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	691a      	ldr	r2, [r3, #16]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eac:	1c5a      	adds	r2, r3, #1
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001ecc:	e04e      	b.n	8001f6c <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ece:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ed0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f000 fb90 	bl	80025f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e058      	b.n	8001f94 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	691a      	ldr	r2, [r3, #16]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef4:	1c5a      	adds	r2, r3, #1
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001efe:	3b01      	subs	r3, #1
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	f003 0304 	and.w	r3, r3, #4
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	d124      	bne.n	8001f6c <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f26:	2b03      	cmp	r3, #3
 8001f28:	d107      	bne.n	8001f3a <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f38:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	691a      	ldr	r2, [r3, #16]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f4c:	1c5a      	adds	r2, r3, #1
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f56:	3b01      	subs	r3, #1
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	3b01      	subs	r3, #1
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f47f ae88 	bne.w	8001c86 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2220      	movs	r2, #32
 8001f7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	e000      	b.n	8001f94 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8001f92:	2302      	movs	r3, #2
  }
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3728      	adds	r7, #40	@ 0x28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	00010004 	.word	0x00010004
 8001fa0:	20000000 	.word	0x20000000
 8001fa4:	14f8b589 	.word	0x14f8b589

08001fa8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af02      	add	r7, sp, #8
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	4608      	mov	r0, r1
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	817b      	strh	r3, [r7, #10]
 8001fba:	460b      	mov	r3, r1
 8001fbc:	813b      	strh	r3, [r7, #8]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fd0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	6a3b      	ldr	r3, [r7, #32]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f000 f960 	bl	80022a4 <I2C_WaitOnFlagUntilTimeout>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00d      	beq.n	8002006 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ff8:	d103      	bne.n	8002002 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002000:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e05f      	b.n	80020c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002006:	897b      	ldrh	r3, [r7, #10]
 8002008:	b2db      	uxtb	r3, r3
 800200a:	461a      	mov	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002014:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002018:	6a3a      	ldr	r2, [r7, #32]
 800201a:	492d      	ldr	r1, [pc, #180]	@ (80020d0 <I2C_RequestMemoryWrite+0x128>)
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f000 f9bb 	bl	8002398 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e04c      	b.n	80020c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	617b      	str	r3, [r7, #20]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002044:	6a39      	ldr	r1, [r7, #32]
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f000 fa46 	bl	80024d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00d      	beq.n	800206e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002056:	2b04      	cmp	r3, #4
 8002058:	d107      	bne.n	800206a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002068:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e02b      	b.n	80020c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800206e:	88fb      	ldrh	r3, [r7, #6]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d105      	bne.n	8002080 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002074:	893b      	ldrh	r3, [r7, #8]
 8002076:	b2da      	uxtb	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	611a      	str	r2, [r3, #16]
 800207e:	e021      	b.n	80020c4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002080:	893b      	ldrh	r3, [r7, #8]
 8002082:	0a1b      	lsrs	r3, r3, #8
 8002084:	b29b      	uxth	r3, r3
 8002086:	b2da      	uxtb	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800208e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002090:	6a39      	ldr	r1, [r7, #32]
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 fa20 	bl	80024d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00d      	beq.n	80020ba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d107      	bne.n	80020b6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e005      	b.n	80020c6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80020ba:	893b      	ldrh	r3, [r7, #8]
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	00010002 	.word	0x00010002

080020d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b088      	sub	sp, #32
 80020d8:	af02      	add	r7, sp, #8
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	4608      	mov	r0, r1
 80020de:	4611      	mov	r1, r2
 80020e0:	461a      	mov	r2, r3
 80020e2:	4603      	mov	r3, r0
 80020e4:	817b      	strh	r3, [r7, #10]
 80020e6:	460b      	mov	r3, r1
 80020e8:	813b      	strh	r3, [r7, #8]
 80020ea:	4613      	mov	r3, r2
 80020ec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80020fc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800210c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800210e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	6a3b      	ldr	r3, [r7, #32]
 8002114:	2200      	movs	r2, #0
 8002116:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f000 f8c2 	bl	80022a4 <I2C_WaitOnFlagUntilTimeout>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00d      	beq.n	8002142 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002130:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002134:	d103      	bne.n	800213e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800213c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e0aa      	b.n	8002298 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002142:	897b      	ldrh	r3, [r7, #10]
 8002144:	b2db      	uxtb	r3, r3
 8002146:	461a      	mov	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002150:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002154:	6a3a      	ldr	r2, [r7, #32]
 8002156:	4952      	ldr	r1, [pc, #328]	@ (80022a0 <I2C_RequestMemoryRead+0x1cc>)
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f000 f91d 	bl	8002398 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e097      	b.n	8002298 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800217e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002180:	6a39      	ldr	r1, [r7, #32]
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f000 f9a8 	bl	80024d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00d      	beq.n	80021aa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002192:	2b04      	cmp	r3, #4
 8002194:	d107      	bne.n	80021a6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e076      	b.n	8002298 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021aa:	88fb      	ldrh	r3, [r7, #6]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d105      	bne.n	80021bc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021b0:	893b      	ldrh	r3, [r7, #8]
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	611a      	str	r2, [r3, #16]
 80021ba:	e021      	b.n	8002200 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80021bc:	893b      	ldrh	r3, [r7, #8]
 80021be:	0a1b      	lsrs	r3, r3, #8
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021cc:	6a39      	ldr	r1, [r7, #32]
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 f982 	bl	80024d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00d      	beq.n	80021f6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d107      	bne.n	80021f2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e050      	b.n	8002298 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021f6:	893b      	ldrh	r3, [r7, #8]
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002200:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002202:	6a39      	ldr	r1, [r7, #32]
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f000 f967 	bl	80024d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00d      	beq.n	800222c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002214:	2b04      	cmp	r3, #4
 8002216:	d107      	bne.n	8002228 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002226:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e035      	b.n	8002298 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800223a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800223c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	6a3b      	ldr	r3, [r7, #32]
 8002242:	2200      	movs	r2, #0
 8002244:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f000 f82b 	bl	80022a4 <I2C_WaitOnFlagUntilTimeout>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00d      	beq.n	8002270 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800225e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002262:	d103      	bne.n	800226c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800226a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e013      	b.n	8002298 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002270:	897b      	ldrh	r3, [r7, #10]
 8002272:	b2db      	uxtb	r3, r3
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	b2da      	uxtb	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002282:	6a3a      	ldr	r2, [r7, #32]
 8002284:	4906      	ldr	r1, [pc, #24]	@ (80022a0 <I2C_RequestMemoryRead+0x1cc>)
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 f886 	bl	8002398 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	00010002 	.word	0x00010002

080022a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	603b      	str	r3, [r7, #0]
 80022b0:	4613      	mov	r3, r2
 80022b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022b4:	e048      	b.n	8002348 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022bc:	d044      	beq.n	8002348 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022be:	f7fe ff2b 	bl	8001118 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d302      	bcc.n	80022d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d139      	bne.n	8002348 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	0c1b      	lsrs	r3, r3, #16
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d10d      	bne.n	80022fa <I2C_WaitOnFlagUntilTimeout+0x56>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	43da      	mvns	r2, r3
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	4013      	ands	r3, r2
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	bf0c      	ite	eq
 80022f0:	2301      	moveq	r3, #1
 80022f2:	2300      	movne	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	461a      	mov	r2, r3
 80022f8:	e00c      	b.n	8002314 <I2C_WaitOnFlagUntilTimeout+0x70>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	43da      	mvns	r2, r3
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	4013      	ands	r3, r2
 8002306:	b29b      	uxth	r3, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	bf0c      	ite	eq
 800230c:	2301      	moveq	r3, #1
 800230e:	2300      	movne	r3, #0
 8002310:	b2db      	uxtb	r3, r3
 8002312:	461a      	mov	r2, r3
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	429a      	cmp	r2, r3
 8002318:	d116      	bne.n	8002348 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002334:	f043 0220 	orr.w	r2, r3, #32
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e023      	b.n	8002390 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	0c1b      	lsrs	r3, r3, #16
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b01      	cmp	r3, #1
 8002350:	d10d      	bne.n	800236e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	43da      	mvns	r2, r3
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	4013      	ands	r3, r2
 800235e:	b29b      	uxth	r3, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	bf0c      	ite	eq
 8002364:	2301      	moveq	r3, #1
 8002366:	2300      	movne	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	461a      	mov	r2, r3
 800236c:	e00c      	b.n	8002388 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	43da      	mvns	r2, r3
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	4013      	ands	r3, r2
 800237a:	b29b      	uxth	r3, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	bf0c      	ite	eq
 8002380:	2301      	moveq	r3, #1
 8002382:	2300      	movne	r3, #0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	461a      	mov	r2, r3
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	429a      	cmp	r2, r3
 800238c:	d093      	beq.n	80022b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
 80023a4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023a6:	e071      	b.n	800248c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023b6:	d123      	bne.n	8002400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023c6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80023d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2200      	movs	r2, #0
 80023d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2220      	movs	r2, #32
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ec:	f043 0204 	orr.w	r2, r3, #4
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e067      	b.n	80024d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002406:	d041      	beq.n	800248c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002408:	f7fe fe86 	bl	8001118 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	429a      	cmp	r2, r3
 8002416:	d302      	bcc.n	800241e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d136      	bne.n	800248c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	0c1b      	lsrs	r3, r3, #16
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b01      	cmp	r3, #1
 8002426:	d10c      	bne.n	8002442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	43da      	mvns	r2, r3
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	4013      	ands	r3, r2
 8002434:	b29b      	uxth	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	bf14      	ite	ne
 800243a:	2301      	movne	r3, #1
 800243c:	2300      	moveq	r3, #0
 800243e:	b2db      	uxtb	r3, r3
 8002440:	e00b      	b.n	800245a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	43da      	mvns	r2, r3
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	4013      	ands	r3, r2
 800244e:	b29b      	uxth	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	bf14      	ite	ne
 8002454:	2301      	movne	r3, #1
 8002456:	2300      	moveq	r3, #0
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d016      	beq.n	800248c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2220      	movs	r2, #32
 8002468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002478:	f043 0220 	orr.w	r2, r3, #32
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e021      	b.n	80024d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	0c1b      	lsrs	r3, r3, #16
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b01      	cmp	r3, #1
 8002494:	d10c      	bne.n	80024b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	43da      	mvns	r2, r3
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	4013      	ands	r3, r2
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	bf14      	ite	ne
 80024a8:	2301      	movne	r3, #1
 80024aa:	2300      	moveq	r3, #0
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	e00b      	b.n	80024c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	43da      	mvns	r2, r3
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	4013      	ands	r3, r2
 80024bc:	b29b      	uxth	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	bf14      	ite	ne
 80024c2:	2301      	movne	r3, #1
 80024c4:	2300      	moveq	r3, #0
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f47f af6d 	bne.w	80023a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024e4:	e034      	b.n	8002550 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 f8e3 	bl	80026b2 <I2C_IsAcknowledgeFailed>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e034      	b.n	8002560 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fc:	d028      	beq.n	8002550 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024fe:	f7fe fe0b 	bl	8001118 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	429a      	cmp	r2, r3
 800250c:	d302      	bcc.n	8002514 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d11d      	bne.n	8002550 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800251e:	2b80      	cmp	r3, #128	@ 0x80
 8002520:	d016      	beq.n	8002550 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2220      	movs	r2, #32
 800252c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253c:	f043 0220 	orr.w	r2, r3, #32
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e007      	b.n	8002560 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800255a:	2b80      	cmp	r3, #128	@ 0x80
 800255c:	d1c3      	bne.n	80024e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002574:	e034      	b.n	80025e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f000 f89b 	bl	80026b2 <I2C_IsAcknowledgeFailed>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e034      	b.n	80025f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258c:	d028      	beq.n	80025e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800258e:	f7fe fdc3 	bl	8001118 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	429a      	cmp	r2, r3
 800259c:	d302      	bcc.n	80025a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d11d      	bne.n	80025e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d016      	beq.n	80025e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2220      	movs	r2, #32
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025cc:	f043 0220 	orr.w	r2, r3, #32
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e007      	b.n	80025f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	f003 0304 	and.w	r3, r3, #4
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d1c3      	bne.n	8002576 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002604:	e049      	b.n	800269a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	f003 0310 	and.w	r3, r3, #16
 8002610:	2b10      	cmp	r3, #16
 8002612:	d119      	bne.n	8002648 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f06f 0210 	mvn.w	r2, #16
 800261c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2220      	movs	r2, #32
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e030      	b.n	80026aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002648:	f7fe fd66 	bl	8001118 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	429a      	cmp	r2, r3
 8002656:	d302      	bcc.n	800265e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d11d      	bne.n	800269a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002668:	2b40      	cmp	r3, #64	@ 0x40
 800266a:	d016      	beq.n	800269a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2220      	movs	r2, #32
 8002676:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002686:	f043 0220 	orr.w	r2, r3, #32
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e007      	b.n	80026aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026a4:	2b40      	cmp	r3, #64	@ 0x40
 80026a6:	d1ae      	bne.n	8002606 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026c8:	d11b      	bne.n	8002702 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80026d2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2220      	movs	r2, #32
 80026de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ee:	f043 0204 	orr.w	r2, r3, #4
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr
	...

08002710 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e272      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 8087 	beq.w	800283e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002730:	4b92      	ldr	r3, [pc, #584]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 030c 	and.w	r3, r3, #12
 8002738:	2b04      	cmp	r3, #4
 800273a:	d00c      	beq.n	8002756 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800273c:	4b8f      	ldr	r3, [pc, #572]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 030c 	and.w	r3, r3, #12
 8002744:	2b08      	cmp	r3, #8
 8002746:	d112      	bne.n	800276e <HAL_RCC_OscConfig+0x5e>
 8002748:	4b8c      	ldr	r3, [pc, #560]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002750:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002754:	d10b      	bne.n	800276e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002756:	4b89      	ldr	r3, [pc, #548]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d06c      	beq.n	800283c <HAL_RCC_OscConfig+0x12c>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d168      	bne.n	800283c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e24c      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002776:	d106      	bne.n	8002786 <HAL_RCC_OscConfig+0x76>
 8002778:	4b80      	ldr	r3, [pc, #512]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a7f      	ldr	r2, [pc, #508]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 800277e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002782:	6013      	str	r3, [r2, #0]
 8002784:	e02e      	b.n	80027e4 <HAL_RCC_OscConfig+0xd4>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10c      	bne.n	80027a8 <HAL_RCC_OscConfig+0x98>
 800278e:	4b7b      	ldr	r3, [pc, #492]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a7a      	ldr	r2, [pc, #488]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 8002794:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	4b78      	ldr	r3, [pc, #480]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a77      	ldr	r2, [pc, #476]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 80027a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027a4:	6013      	str	r3, [r2, #0]
 80027a6:	e01d      	b.n	80027e4 <HAL_RCC_OscConfig+0xd4>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027b0:	d10c      	bne.n	80027cc <HAL_RCC_OscConfig+0xbc>
 80027b2:	4b72      	ldr	r3, [pc, #456]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a71      	ldr	r2, [pc, #452]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 80027b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	4b6f      	ldr	r3, [pc, #444]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a6e      	ldr	r2, [pc, #440]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 80027c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	e00b      	b.n	80027e4 <HAL_RCC_OscConfig+0xd4>
 80027cc:	4b6b      	ldr	r3, [pc, #428]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a6a      	ldr	r2, [pc, #424]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 80027d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027d6:	6013      	str	r3, [r2, #0]
 80027d8:	4b68      	ldr	r3, [pc, #416]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a67      	ldr	r2, [pc, #412]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 80027de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d013      	beq.n	8002814 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ec:	f7fe fc94 	bl	8001118 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027f4:	f7fe fc90 	bl	8001118 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b64      	cmp	r3, #100	@ 0x64
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e200      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002806:	4b5d      	ldr	r3, [pc, #372]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0f0      	beq.n	80027f4 <HAL_RCC_OscConfig+0xe4>
 8002812:	e014      	b.n	800283e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002814:	f7fe fc80 	bl	8001118 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800281c:	f7fe fc7c 	bl	8001118 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b64      	cmp	r3, #100	@ 0x64
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e1ec      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800282e:	4b53      	ldr	r3, [pc, #332]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0x10c>
 800283a:	e000      	b.n	800283e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800283c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d063      	beq.n	8002912 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800284a:	4b4c      	ldr	r3, [pc, #304]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f003 030c 	and.w	r3, r3, #12
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00b      	beq.n	800286e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002856:	4b49      	ldr	r3, [pc, #292]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f003 030c 	and.w	r3, r3, #12
 800285e:	2b08      	cmp	r3, #8
 8002860:	d11c      	bne.n	800289c <HAL_RCC_OscConfig+0x18c>
 8002862:	4b46      	ldr	r3, [pc, #280]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d116      	bne.n	800289c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800286e:	4b43      	ldr	r3, [pc, #268]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d005      	beq.n	8002886 <HAL_RCC_OscConfig+0x176>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d001      	beq.n	8002886 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e1c0      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002886:	4b3d      	ldr	r3, [pc, #244]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	4939      	ldr	r1, [pc, #228]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 8002896:	4313      	orrs	r3, r2
 8002898:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800289a:	e03a      	b.n	8002912 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d020      	beq.n	80028e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028a4:	4b36      	ldr	r3, [pc, #216]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028aa:	f7fe fc35 	bl	8001118 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028b2:	f7fe fc31 	bl	8001118 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e1a1      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c4:	4b2d      	ldr	r3, [pc, #180]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0f0      	beq.n	80028b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d0:	4b2a      	ldr	r3, [pc, #168]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	4927      	ldr	r1, [pc, #156]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	600b      	str	r3, [r1, #0]
 80028e4:	e015      	b.n	8002912 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028e6:	4b26      	ldr	r3, [pc, #152]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ec:	f7fe fc14 	bl	8001118 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028f4:	f7fe fc10 	bl	8001118 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e180      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002906:	4b1d      	ldr	r3, [pc, #116]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f0      	bne.n	80028f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b00      	cmp	r3, #0
 800291c:	d03a      	beq.n	8002994 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d019      	beq.n	800295a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002926:	4b17      	ldr	r3, [pc, #92]	@ (8002984 <HAL_RCC_OscConfig+0x274>)
 8002928:	2201      	movs	r2, #1
 800292a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800292c:	f7fe fbf4 	bl	8001118 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002934:	f7fe fbf0 	bl	8001118 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e160      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002946:	4b0d      	ldr	r3, [pc, #52]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 8002948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002952:	2001      	movs	r0, #1
 8002954:	f000 faba 	bl	8002ecc <RCC_Delay>
 8002958:	e01c      	b.n	8002994 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800295a:	4b0a      	ldr	r3, [pc, #40]	@ (8002984 <HAL_RCC_OscConfig+0x274>)
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002960:	f7fe fbda 	bl	8001118 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002966:	e00f      	b.n	8002988 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002968:	f7fe fbd6 	bl	8001118 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d908      	bls.n	8002988 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e146      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
 800297a:	bf00      	nop
 800297c:	40021000 	.word	0x40021000
 8002980:	42420000 	.word	0x42420000
 8002984:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002988:	4b92      	ldr	r3, [pc, #584]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 800298a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1e9      	bne.n	8002968 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 80a6 	beq.w	8002aee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029a2:	2300      	movs	r3, #0
 80029a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029a6:	4b8b      	ldr	r3, [pc, #556]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10d      	bne.n	80029ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029b2:	4b88      	ldr	r3, [pc, #544]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	4a87      	ldr	r2, [pc, #540]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 80029b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029bc:	61d3      	str	r3, [r2, #28]
 80029be:	4b85      	ldr	r3, [pc, #532]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029c6:	60bb      	str	r3, [r7, #8]
 80029c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ca:	2301      	movs	r3, #1
 80029cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ce:	4b82      	ldr	r3, [pc, #520]	@ (8002bd8 <HAL_RCC_OscConfig+0x4c8>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d118      	bne.n	8002a0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029da:	4b7f      	ldr	r3, [pc, #508]	@ (8002bd8 <HAL_RCC_OscConfig+0x4c8>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a7e      	ldr	r2, [pc, #504]	@ (8002bd8 <HAL_RCC_OscConfig+0x4c8>)
 80029e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029e6:	f7fe fb97 	bl	8001118 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ee:	f7fe fb93 	bl	8001118 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b64      	cmp	r3, #100	@ 0x64
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e103      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a00:	4b75      	ldr	r3, [pc, #468]	@ (8002bd8 <HAL_RCC_OscConfig+0x4c8>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0f0      	beq.n	80029ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d106      	bne.n	8002a22 <HAL_RCC_OscConfig+0x312>
 8002a14:	4b6f      	ldr	r3, [pc, #444]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	4a6e      	ldr	r2, [pc, #440]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a1a:	f043 0301 	orr.w	r3, r3, #1
 8002a1e:	6213      	str	r3, [r2, #32]
 8002a20:	e02d      	b.n	8002a7e <HAL_RCC_OscConfig+0x36e>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10c      	bne.n	8002a44 <HAL_RCC_OscConfig+0x334>
 8002a2a:	4b6a      	ldr	r3, [pc, #424]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	4a69      	ldr	r2, [pc, #420]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a30:	f023 0301 	bic.w	r3, r3, #1
 8002a34:	6213      	str	r3, [r2, #32]
 8002a36:	4b67      	ldr	r3, [pc, #412]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	4a66      	ldr	r2, [pc, #408]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a3c:	f023 0304 	bic.w	r3, r3, #4
 8002a40:	6213      	str	r3, [r2, #32]
 8002a42:	e01c      	b.n	8002a7e <HAL_RCC_OscConfig+0x36e>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	2b05      	cmp	r3, #5
 8002a4a:	d10c      	bne.n	8002a66 <HAL_RCC_OscConfig+0x356>
 8002a4c:	4b61      	ldr	r3, [pc, #388]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	4a60      	ldr	r2, [pc, #384]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a52:	f043 0304 	orr.w	r3, r3, #4
 8002a56:	6213      	str	r3, [r2, #32]
 8002a58:	4b5e      	ldr	r3, [pc, #376]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	4a5d      	ldr	r2, [pc, #372]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a5e:	f043 0301 	orr.w	r3, r3, #1
 8002a62:	6213      	str	r3, [r2, #32]
 8002a64:	e00b      	b.n	8002a7e <HAL_RCC_OscConfig+0x36e>
 8002a66:	4b5b      	ldr	r3, [pc, #364]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	4a5a      	ldr	r2, [pc, #360]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a6c:	f023 0301 	bic.w	r3, r3, #1
 8002a70:	6213      	str	r3, [r2, #32]
 8002a72:	4b58      	ldr	r3, [pc, #352]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	4a57      	ldr	r2, [pc, #348]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a78:	f023 0304 	bic.w	r3, r3, #4
 8002a7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d015      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a86:	f7fe fb47 	bl	8001118 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a8c:	e00a      	b.n	8002aa4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a8e:	f7fe fb43 	bl	8001118 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e0b1      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa4:	4b4b      	ldr	r3, [pc, #300]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0ee      	beq.n	8002a8e <HAL_RCC_OscConfig+0x37e>
 8002ab0:	e014      	b.n	8002adc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab2:	f7fe fb31 	bl	8001118 <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab8:	e00a      	b.n	8002ad0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aba:	f7fe fb2d 	bl	8001118 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e09b      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ad0:	4b40      	ldr	r3, [pc, #256]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1ee      	bne.n	8002aba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002adc:	7dfb      	ldrb	r3, [r7, #23]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d105      	bne.n	8002aee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae2:	4b3c      	ldr	r3, [pc, #240]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	4a3b      	ldr	r2, [pc, #236]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002ae8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002aec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 8087 	beq.w	8002c06 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002af8:	4b36      	ldr	r3, [pc, #216]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 030c 	and.w	r3, r3, #12
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d061      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d146      	bne.n	8002b9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b0c:	4b33      	ldr	r3, [pc, #204]	@ (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b12:	f7fe fb01 	bl	8001118 <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1a:	f7fe fafd 	bl	8001118 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e06d      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b2c:	4b29      	ldr	r3, [pc, #164]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1f0      	bne.n	8002b1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b40:	d108      	bne.n	8002b54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b42:	4b24      	ldr	r3, [pc, #144]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	4921      	ldr	r1, [pc, #132]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b54:	4b1f      	ldr	r3, [pc, #124]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a19      	ldr	r1, [r3, #32]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b64:	430b      	orrs	r3, r1
 8002b66:	491b      	ldr	r1, [pc, #108]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 8002b6e:	2201      	movs	r2, #1
 8002b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b72:	f7fe fad1 	bl	8001118 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b7a:	f7fe facd 	bl	8001118 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e03d      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b8c:	4b11      	ldr	r3, [pc, #68]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0f0      	beq.n	8002b7a <HAL_RCC_OscConfig+0x46a>
 8002b98:	e035      	b.n	8002c06 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9a:	4b10      	ldr	r3, [pc, #64]	@ (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba0:	f7fe faba 	bl	8001118 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba8:	f7fe fab6 	bl	8001118 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e026      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bba:	4b06      	ldr	r3, [pc, #24]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x498>
 8002bc6:	e01e      	b.n	8002c06 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	69db      	ldr	r3, [r3, #28]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d107      	bne.n	8002be0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e019      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	40007000 	.word	0x40007000
 8002bdc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002be0:	4b0b      	ldr	r3, [pc, #44]	@ (8002c10 <HAL_RCC_OscConfig+0x500>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d106      	bne.n	8002c02 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d001      	beq.n	8002c06 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e000      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40021000 	.word	0x40021000

08002c14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e0d0      	b.n	8002dca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c28:	4b6a      	ldr	r3, [pc, #424]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d910      	bls.n	8002c58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c36:	4b67      	ldr	r3, [pc, #412]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f023 0207 	bic.w	r2, r3, #7
 8002c3e:	4965      	ldr	r1, [pc, #404]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c46:	4b63      	ldr	r3, [pc, #396]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d001      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e0b8      	b.n	8002dca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d020      	beq.n	8002ca6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d005      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c70:	4b59      	ldr	r3, [pc, #356]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	4a58      	ldr	r2, [pc, #352]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c76:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002c7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0308 	and.w	r3, r3, #8
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d005      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c88:	4b53      	ldr	r3, [pc, #332]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	4a52      	ldr	r2, [pc, #328]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002c92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c94:	4b50      	ldr	r3, [pc, #320]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	494d      	ldr	r1, [pc, #308]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d040      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d107      	bne.n	8002cca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cba:	4b47      	ldr	r3, [pc, #284]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d115      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e07f      	b.n	8002dca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d107      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd2:	4b41      	ldr	r3, [pc, #260]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d109      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e073      	b.n	8002dca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce2:	4b3d      	ldr	r3, [pc, #244]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e06b      	b.n	8002dca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cf2:	4b39      	ldr	r3, [pc, #228]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f023 0203 	bic.w	r2, r3, #3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	4936      	ldr	r1, [pc, #216]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d04:	f7fe fa08 	bl	8001118 <HAL_GetTick>
 8002d08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d0a:	e00a      	b.n	8002d22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d0c:	f7fe fa04 	bl	8001118 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e053      	b.n	8002dca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d22:	4b2d      	ldr	r3, [pc, #180]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f003 020c 	and.w	r2, r3, #12
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d1eb      	bne.n	8002d0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d34:	4b27      	ldr	r3, [pc, #156]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d210      	bcs.n	8002d64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d42:	4b24      	ldr	r3, [pc, #144]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f023 0207 	bic.w	r2, r3, #7
 8002d4a:	4922      	ldr	r1, [pc, #136]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d52:	4b20      	ldr	r3, [pc, #128]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d001      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e032      	b.n	8002dca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d008      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d70:	4b19      	ldr	r3, [pc, #100]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	4916      	ldr	r1, [pc, #88]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d009      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d8e:	4b12      	ldr	r3, [pc, #72]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	490e      	ldr	r1, [pc, #56]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002da2:	f000 f821 	bl	8002de8 <HAL_RCC_GetSysClockFreq>
 8002da6:	4602      	mov	r2, r0
 8002da8:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	091b      	lsrs	r3, r3, #4
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	490a      	ldr	r1, [pc, #40]	@ (8002ddc <HAL_RCC_ClockConfig+0x1c8>)
 8002db4:	5ccb      	ldrb	r3, [r1, r3]
 8002db6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dba:	4a09      	ldr	r2, [pc, #36]	@ (8002de0 <HAL_RCC_ClockConfig+0x1cc>)
 8002dbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002dbe:	4b09      	ldr	r3, [pc, #36]	@ (8002de4 <HAL_RCC_ClockConfig+0x1d0>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fe f966 	bl	8001094 <HAL_InitTick>

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40022000 	.word	0x40022000
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	08003644 	.word	0x08003644
 8002de0:	20000000 	.word	0x20000000
 8002de4:	20000004 	.word	0x20000004

08002de8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b087      	sub	sp, #28
 8002dec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dee:	2300      	movs	r3, #0
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	2300      	movs	r3, #0
 8002df4:	60bb      	str	r3, [r7, #8]
 8002df6:	2300      	movs	r3, #0
 8002df8:	617b      	str	r3, [r7, #20]
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e02:	4b1e      	ldr	r3, [pc, #120]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x94>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f003 030c 	and.w	r3, r3, #12
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d002      	beq.n	8002e18 <HAL_RCC_GetSysClockFreq+0x30>
 8002e12:	2b08      	cmp	r3, #8
 8002e14:	d003      	beq.n	8002e1e <HAL_RCC_GetSysClockFreq+0x36>
 8002e16:	e027      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e18:	4b19      	ldr	r3, [pc, #100]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e1a:	613b      	str	r3, [r7, #16]
      break;
 8002e1c:	e027      	b.n	8002e6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	0c9b      	lsrs	r3, r3, #18
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	4a17      	ldr	r2, [pc, #92]	@ (8002e84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e28:	5cd3      	ldrb	r3, [r2, r3]
 8002e2a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d010      	beq.n	8002e58 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e36:	4b11      	ldr	r3, [pc, #68]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x94>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	0c5b      	lsrs	r3, r3, #17
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	4a11      	ldr	r2, [pc, #68]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e42:	5cd3      	ldrb	r3, [r2, r3]
 8002e44:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a0d      	ldr	r2, [pc, #52]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e4a:	fb03 f202 	mul.w	r2, r3, r2
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e54:	617b      	str	r3, [r7, #20]
 8002e56:	e004      	b.n	8002e62 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a0c      	ldr	r2, [pc, #48]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e5c:	fb02 f303 	mul.w	r3, r2, r3
 8002e60:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	613b      	str	r3, [r7, #16]
      break;
 8002e66:	e002      	b.n	8002e6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e68:	4b05      	ldr	r3, [pc, #20]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e6a:	613b      	str	r3, [r7, #16]
      break;
 8002e6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e6e:	693b      	ldr	r3, [r7, #16]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	371c      	adds	r7, #28
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bc80      	pop	{r7}
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	007a1200 	.word	0x007a1200
 8002e84:	0800365c 	.word	0x0800365c
 8002e88:	0800366c 	.word	0x0800366c
 8002e8c:	003d0900 	.word	0x003d0900

08002e90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e94:	4b02      	ldr	r3, [pc, #8]	@ (8002ea0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e96:	681b      	ldr	r3, [r3, #0]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr
 8002ea0:	20000000 	.word	0x20000000

08002ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ea8:	f7ff fff2 	bl	8002e90 <HAL_RCC_GetHCLKFreq>
 8002eac:	4602      	mov	r2, r0
 8002eae:	4b05      	ldr	r3, [pc, #20]	@ (8002ec4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	0a1b      	lsrs	r3, r3, #8
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	4903      	ldr	r1, [pc, #12]	@ (8002ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eba:	5ccb      	ldrb	r3, [r1, r3]
 8002ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	08003654 	.word	0x08003654

08002ecc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8002f00 <RCC_Delay+0x34>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a0a      	ldr	r2, [pc, #40]	@ (8002f04 <RCC_Delay+0x38>)
 8002eda:	fba2 2303 	umull	r2, r3, r2, r3
 8002ede:	0a5b      	lsrs	r3, r3, #9
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	fb02 f303 	mul.w	r3, r2, r3
 8002ee6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ee8:	bf00      	nop
  }
  while (Delay --);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	1e5a      	subs	r2, r3, #1
 8002eee:	60fa      	str	r2, [r7, #12]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1f9      	bne.n	8002ee8 <RCC_Delay+0x1c>
}
 8002ef4:	bf00      	nop
 8002ef6:	bf00      	nop
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr
 8002f00:	20000000 	.word	0x20000000
 8002f04:	10624dd3 	.word	0x10624dd3

08002f08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e041      	b.n	8002f9e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d106      	bne.n	8002f34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7fd fff6 	bl	8000f20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2202      	movs	r2, #2
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3304      	adds	r3, #4
 8002f44:	4619      	mov	r1, r3
 8002f46:	4610      	mov	r0, r2
 8002f48:	f000 f8f0 	bl	800312c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
	...

08002fa8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d101      	bne.n	8002fc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	e0ae      	b.n	8003124 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b0c      	cmp	r3, #12
 8002fd2:	f200 809f 	bhi.w	8003114 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002fd6:	a201      	add	r2, pc, #4	@ (adr r2, 8002fdc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fdc:	08003011 	.word	0x08003011
 8002fe0:	08003115 	.word	0x08003115
 8002fe4:	08003115 	.word	0x08003115
 8002fe8:	08003115 	.word	0x08003115
 8002fec:	08003051 	.word	0x08003051
 8002ff0:	08003115 	.word	0x08003115
 8002ff4:	08003115 	.word	0x08003115
 8002ff8:	08003115 	.word	0x08003115
 8002ffc:	08003093 	.word	0x08003093
 8003000:	08003115 	.word	0x08003115
 8003004:	08003115 	.word	0x08003115
 8003008:	08003115 	.word	0x08003115
 800300c:	080030d3 	.word	0x080030d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68b9      	ldr	r1, [r7, #8]
 8003016:	4618      	mov	r0, r3
 8003018:	f000 f8f6 	bl	8003208 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	699a      	ldr	r2, [r3, #24]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 0208 	orr.w	r2, r2, #8
 800302a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	699a      	ldr	r2, [r3, #24]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0204 	bic.w	r2, r2, #4
 800303a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6999      	ldr	r1, [r3, #24]
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	691a      	ldr	r2, [r3, #16]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	619a      	str	r2, [r3, #24]
      break;
 800304e:	e064      	b.n	800311a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	4618      	mov	r0, r3
 8003058:	f000 f93c 	bl	80032d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699a      	ldr	r2, [r3, #24]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800306a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	699a      	ldr	r2, [r3, #24]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800307a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6999      	ldr	r1, [r3, #24]
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	021a      	lsls	r2, r3, #8
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	619a      	str	r2, [r3, #24]
      break;
 8003090:	e043      	b.n	800311a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68b9      	ldr	r1, [r7, #8]
 8003098:	4618      	mov	r0, r3
 800309a:	f000 f985 	bl	80033a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	69da      	ldr	r2, [r3, #28]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f042 0208 	orr.w	r2, r2, #8
 80030ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	69da      	ldr	r2, [r3, #28]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0204 	bic.w	r2, r2, #4
 80030bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	69d9      	ldr	r1, [r3, #28]
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	691a      	ldr	r2, [r3, #16]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	61da      	str	r2, [r3, #28]
      break;
 80030d0:	e023      	b.n	800311a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68b9      	ldr	r1, [r7, #8]
 80030d8:	4618      	mov	r0, r3
 80030da:	f000 f9cf 	bl	800347c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	69da      	ldr	r2, [r3, #28]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	69da      	ldr	r2, [r3, #28]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	69d9      	ldr	r1, [r3, #28]
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	021a      	lsls	r2, r3, #8
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	61da      	str	r2, [r3, #28]
      break;
 8003112:	e002      	b.n	800311a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	75fb      	strb	r3, [r7, #23]
      break;
 8003118:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003122:	7dfb      	ldrb	r3, [r7, #23]
}
 8003124:	4618      	mov	r0, r3
 8003126:	3718      	adds	r7, #24
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a2f      	ldr	r2, [pc, #188]	@ (80031fc <TIM_Base_SetConfig+0xd0>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d00b      	beq.n	800315c <TIM_Base_SetConfig+0x30>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800314a:	d007      	beq.n	800315c <TIM_Base_SetConfig+0x30>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a2c      	ldr	r2, [pc, #176]	@ (8003200 <TIM_Base_SetConfig+0xd4>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d003      	beq.n	800315c <TIM_Base_SetConfig+0x30>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a2b      	ldr	r2, [pc, #172]	@ (8003204 <TIM_Base_SetConfig+0xd8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d108      	bne.n	800316e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	4313      	orrs	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a22      	ldr	r2, [pc, #136]	@ (80031fc <TIM_Base_SetConfig+0xd0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d00b      	beq.n	800318e <TIM_Base_SetConfig+0x62>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800317c:	d007      	beq.n	800318e <TIM_Base_SetConfig+0x62>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a1f      	ldr	r2, [pc, #124]	@ (8003200 <TIM_Base_SetConfig+0xd4>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d003      	beq.n	800318e <TIM_Base_SetConfig+0x62>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a1e      	ldr	r2, [pc, #120]	@ (8003204 <TIM_Base_SetConfig+0xd8>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d108      	bne.n	80031a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	4313      	orrs	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a0d      	ldr	r2, [pc, #52]	@ (80031fc <TIM_Base_SetConfig+0xd0>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d103      	bne.n	80031d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	691a      	ldr	r2, [r3, #16]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d005      	beq.n	80031f2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	f023 0201 	bic.w	r2, r3, #1
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	611a      	str	r2, [r3, #16]
  }
}
 80031f2:	bf00      	nop
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr
 80031fc:	40012c00 	.word	0x40012c00
 8003200:	40000400 	.word	0x40000400
 8003204:	40000800 	.word	0x40000800

08003208 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	f023 0201 	bic.w	r2, r3, #1
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f023 0303 	bic.w	r3, r3, #3
 800323e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	4313      	orrs	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f023 0302 	bic.w	r3, r3, #2
 8003250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	4313      	orrs	r3, r2
 800325a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a1c      	ldr	r2, [pc, #112]	@ (80032d0 <TIM_OC1_SetConfig+0xc8>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d10c      	bne.n	800327e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f023 0308 	bic.w	r3, r3, #8
 800326a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	4313      	orrs	r3, r2
 8003274:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f023 0304 	bic.w	r3, r3, #4
 800327c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a13      	ldr	r2, [pc, #76]	@ (80032d0 <TIM_OC1_SetConfig+0xc8>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d111      	bne.n	80032aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800328c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003294:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	4313      	orrs	r3, r2
 800329e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	621a      	str	r2, [r3, #32]
}
 80032c4:	bf00      	nop
 80032c6:	371c      	adds	r7, #28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bc80      	pop	{r7}
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	40012c00 	.word	0x40012c00

080032d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b087      	sub	sp, #28
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	f023 0210 	bic.w	r2, r3, #16
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800330a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	021b      	lsls	r3, r3, #8
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	4313      	orrs	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f023 0320 	bic.w	r3, r3, #32
 800331e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	011b      	lsls	r3, r3, #4
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	4313      	orrs	r3, r2
 800332a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a1d      	ldr	r2, [pc, #116]	@ (80033a4 <TIM_OC2_SetConfig+0xd0>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d10d      	bne.n	8003350 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800333a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	4313      	orrs	r3, r2
 8003346:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800334e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a14      	ldr	r2, [pc, #80]	@ (80033a4 <TIM_OC2_SetConfig+0xd0>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d113      	bne.n	8003380 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800335e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003366:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	4313      	orrs	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	4313      	orrs	r3, r2
 800337e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	621a      	str	r2, [r3, #32]
}
 800339a:	bf00      	nop
 800339c:	371c      	adds	r7, #28
 800339e:	46bd      	mov	sp, r7
 80033a0:	bc80      	pop	{r7}
 80033a2:	4770      	bx	lr
 80033a4:	40012c00 	.word	0x40012c00

080033a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b087      	sub	sp, #28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f023 0303 	bic.w	r3, r3, #3
 80033de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80033f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	021b      	lsls	r3, r3, #8
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a1d      	ldr	r2, [pc, #116]	@ (8003478 <TIM_OC3_SetConfig+0xd0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d10d      	bne.n	8003422 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800340c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	021b      	lsls	r3, r3, #8
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	4313      	orrs	r3, r2
 8003418:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003420:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a14      	ldr	r2, [pc, #80]	@ (8003478 <TIM_OC3_SetConfig+0xd0>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d113      	bne.n	8003452 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003430:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003438:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4313      	orrs	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	4313      	orrs	r3, r2
 8003450:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	621a      	str	r2, [r3, #32]
}
 800346c:	bf00      	nop
 800346e:	371c      	adds	r7, #28
 8003470:	46bd      	mov	sp, r7
 8003472:	bc80      	pop	{r7}
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	40012c00 	.word	0x40012c00

0800347c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800347c:	b480      	push	{r7}
 800347e:	b087      	sub	sp, #28
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	021b      	lsls	r3, r3, #8
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	4313      	orrs	r3, r2
 80034be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80034c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	031b      	lsls	r3, r3, #12
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a0f      	ldr	r2, [pc, #60]	@ (8003514 <TIM_OC4_SetConfig+0x98>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d109      	bne.n	80034f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	019b      	lsls	r3, r3, #6
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	621a      	str	r2, [r3, #32]
}
 800350a:	bf00      	nop
 800350c:	371c      	adds	r7, #28
 800350e:	46bd      	mov	sp, r7
 8003510:	bc80      	pop	{r7}
 8003512:	4770      	bx	lr
 8003514:	40012c00 	.word	0x40012c00

08003518 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003528:	2b01      	cmp	r3, #1
 800352a:	d101      	bne.n	8003530 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800352c:	2302      	movs	r3, #2
 800352e:	e046      	b.n	80035be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2202      	movs	r2, #2
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003556:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	4313      	orrs	r3, r2
 8003560:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a16      	ldr	r2, [pc, #88]	@ (80035c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d00e      	beq.n	8003592 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800357c:	d009      	beq.n	8003592 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a12      	ldr	r2, [pc, #72]	@ (80035cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d004      	beq.n	8003592 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a10      	ldr	r2, [pc, #64]	@ (80035d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d10c      	bne.n	80035ac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003598:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bc80      	pop	{r7}
 80035c6:	4770      	bx	lr
 80035c8:	40012c00 	.word	0x40012c00
 80035cc:	40000400 	.word	0x40000400
 80035d0:	40000800 	.word	0x40000800

080035d4 <memset>:
 80035d4:	4603      	mov	r3, r0
 80035d6:	4402      	add	r2, r0
 80035d8:	4293      	cmp	r3, r2
 80035da:	d100      	bne.n	80035de <memset+0xa>
 80035dc:	4770      	bx	lr
 80035de:	f803 1b01 	strb.w	r1, [r3], #1
 80035e2:	e7f9      	b.n	80035d8 <memset+0x4>

080035e4 <__libc_init_array>:
 80035e4:	b570      	push	{r4, r5, r6, lr}
 80035e6:	2600      	movs	r6, #0
 80035e8:	4d0c      	ldr	r5, [pc, #48]	@ (800361c <__libc_init_array+0x38>)
 80035ea:	4c0d      	ldr	r4, [pc, #52]	@ (8003620 <__libc_init_array+0x3c>)
 80035ec:	1b64      	subs	r4, r4, r5
 80035ee:	10a4      	asrs	r4, r4, #2
 80035f0:	42a6      	cmp	r6, r4
 80035f2:	d109      	bne.n	8003608 <__libc_init_array+0x24>
 80035f4:	f000 f81a 	bl	800362c <_init>
 80035f8:	2600      	movs	r6, #0
 80035fa:	4d0a      	ldr	r5, [pc, #40]	@ (8003624 <__libc_init_array+0x40>)
 80035fc:	4c0a      	ldr	r4, [pc, #40]	@ (8003628 <__libc_init_array+0x44>)
 80035fe:	1b64      	subs	r4, r4, r5
 8003600:	10a4      	asrs	r4, r4, #2
 8003602:	42a6      	cmp	r6, r4
 8003604:	d105      	bne.n	8003612 <__libc_init_array+0x2e>
 8003606:	bd70      	pop	{r4, r5, r6, pc}
 8003608:	f855 3b04 	ldr.w	r3, [r5], #4
 800360c:	4798      	blx	r3
 800360e:	3601      	adds	r6, #1
 8003610:	e7ee      	b.n	80035f0 <__libc_init_array+0xc>
 8003612:	f855 3b04 	ldr.w	r3, [r5], #4
 8003616:	4798      	blx	r3
 8003618:	3601      	adds	r6, #1
 800361a:	e7f2      	b.n	8003602 <__libc_init_array+0x1e>
 800361c:	08003670 	.word	0x08003670
 8003620:	08003670 	.word	0x08003670
 8003624:	08003670 	.word	0x08003670
 8003628:	08003674 	.word	0x08003674

0800362c <_init>:
 800362c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800362e:	bf00      	nop
 8003630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003632:	bc08      	pop	{r3}
 8003634:	469e      	mov	lr, r3
 8003636:	4770      	bx	lr

08003638 <_fini>:
 8003638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800363a:	bf00      	nop
 800363c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800363e:	bc08      	pop	{r3}
 8003640:	469e      	mov	lr, r3
 8003642:	4770      	bx	lr
